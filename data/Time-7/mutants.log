1:LVR:FALSE:TRUE:org.joda.time.format.DateTimeFormatter@<init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser):114:false |==> true
2:LVR:POS:0:org.joda.time.format.DateTimeFormatter@<init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser):118:2000 |==> 0
3:LVR:POS:NEG:org.joda.time.format.DateTimeFormatter@<init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser):118:2000 |==> -2000
4:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@isPrinter():147:iPrinter != null |==> true
5:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@isParser():165:iParser != null |==> true
6:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() |==> false
7:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null |==> true
8:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null && locale.equals(getLocale()) |==> locale != null == locale.equals(getLocale())
9:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null && locale.equals(getLocale()) |==> false
10:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null && locale.equals(getLocale()) |==> locale != null
11:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale != null && locale.equals(getLocale()) |==> locale.equals(getLocale())
12:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() || (locale != null && locale.equals(getLocale())) |==> locale == getLocale() != (locale != null && locale.equals(getLocale()))
13:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() || (locale != null && locale.equals(getLocale())) |==> locale == getLocale()
14:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() || (locale != null && locale.equals(getLocale())) |==> (locale != null && locale.equals(getLocale()))
15:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withLocale(java.util.Locale):190:locale == getLocale() || (locale != null && locale.equals(getLocale())) |==> true
16:LVR:TRUE:FALSE:org.joda.time.format.DateTimeFormatter@withOffsetParsed():223:true |==> false
17:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withOffsetParsed():223:iOffsetParsed == true |==> false
18:ROR:==(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withOffsetParsed():223:iOffsetParsed == true |==> iOffsetParsed
19:ROR:==(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withOffsetParsed():223:iOffsetParsed == true |==> true
20:LVR:TRUE:FALSE:org.joda.time.format.DateTimeFormatter@withOffsetParsed():227:true |==> false
21:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withChronology(org.joda.time.Chronology):258:iChrono == chrono |==> false
22:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withZone(org.joda.time.DateTimeZone):322:iZone == zone |==> false
23:LVR:FALSE:TRUE:org.joda.time.format.DateTimeFormatter@withZone(org.joda.time.DateTimeZone):326:false |==> true
24:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear |==> false
25:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null |==> true
26:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null && iPivotYear.equals(pivotYear) |==> iPivotYear != null == iPivotYear.equals(pivotYear)
27:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null && iPivotYear.equals(pivotYear) |==> false
28:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null && iPivotYear.equals(pivotYear) |==> iPivotYear != null
29:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear != null && iPivotYear.equals(pivotYear) |==> iPivotYear.equals(pivotYear)
30:COR:||(boolean,boolean):!=(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear)) |==> iPivotYear == pivotYear != (iPivotYear != null && iPivotYear.equals(pivotYear))
31:COR:||(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear)) |==> iPivotYear == pivotYear
32:COR:||(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear)) |==> (iPivotYear != null && iPivotYear.equals(pivotYear))
33:COR:||(boolean,boolean):TRUE(boolean,boolean):org.joda.time.format.DateTimeFormatter@withPivotYear(java.lang.Integer):369:iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear)) |==> true
34:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant):463:printTo(buf, millis, chrono) |==> <NO-OP>
35:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,org.joda.time.ReadableInstant):475:printTo(out, millis, chrono) |==> <NO-OP>
36:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.Appendable,org.joda.time.ReadableInstant):486:appendable.append(print(instant)) |==> <NO-OP>
37:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long):498:printTo(buf, instant, null) |==> <NO-OP>
38:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long):509:printTo(out, instant, null) |==> <NO-OP>
39:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.Appendable,long):521:appendable.append(print(instant)) |==> <NO-OP>
40:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial):536:partial == null |==> false
41:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial):539:printer.printTo(buf, partial, iLocale) |==> <NO-OP>
42:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,org.joda.time.ReadablePartial):553:partial == null |==> false
43:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,org.joda.time.ReadablePartial):556:printer.printTo(out, partial, iLocale) |==> <NO-OP>
44:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.Appendable,org.joda.time.ReadablePartial):570:appendable.append(print(partial)) |==> <NO-OP>
45:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@print(org.joda.time.ReadableInstant):585:printTo(buf, instant) |==> <NO-OP>
46:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@print(long):600:printTo(buf, instant) |==> <NO-OP>
47:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@print(org.joda.time.ReadablePartial):615:printTo(buf, partial) |==> <NO-OP>
48:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):621:chrono = selectChronology(chrono) |==> <NO-OP>
49:AOR:+(long,long):%(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):626:instant + offset |==> instant % offset
50:AOR:+(long,long):*(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):626:instant + offset |==> instant * offset
51:AOR:+(long,long):-(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):626:instant + offset |==> instant - offset
52:AOR:+(long,long):/(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):626:instant + offset |==> instant / offset
53:LOR:^(long,long):&(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:instant ^ adjustedInstant |==> instant & adjustedInstant
54:LOR:^(long,long):|(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:instant ^ adjustedInstant |==> instant | adjustedInstant
55:LVR:0:POS:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:0 |==> 1
56:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:0 |==> -1
57:ROR:<(long,long):!=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) != 0
58:ROR:<(long,long):<=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) <= 0
59:ROR:<(long,long):FALSE(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 |==> false
60:LOR:^(long,long):&(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:instant ^ offset |==> instant & offset
61:LOR:^(long,long):|(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:instant ^ offset |==> instant | offset
62:LVR:0:POS:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:0 |==> 1
63:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:0 |==> -1
64:ROR:>=(long,long):==(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ offset) >= 0 |==> (instant ^ offset) == 0
65:ROR:>=(long,long):>(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ offset) >= 0 |==> (instant ^ offset) > 0
66:ROR:>=(long,long):TRUE(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ offset) >= 0 |==> true
67:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ adjustedInstant) < 0 == (instant ^ offset) >= 0
68:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> false
69:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ adjustedInstant) < 0
70:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):627:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ offset) >= 0
71:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):629:zone = DateTimeZone.UTC |==> <NO-OP>
72:LVR:0:POS:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):630:0 |==> 1
73:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):630:0 |==> -1
74:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):630:offset = 0 |==> <NO-OP>
75:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):631:adjustedInstant = instant |==> <NO-OP>
76:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.lang.StringBuffer,long,org.joda.time.Chronology):633:printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale) |==> <NO-OP>
77:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):638:chrono = selectChronology(chrono) |==> <NO-OP>
78:AOR:+(long,long):%(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):643:instant + offset |==> instant % offset
79:AOR:+(long,long):*(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):643:instant + offset |==> instant * offset
80:AOR:+(long,long):-(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):643:instant + offset |==> instant - offset
81:AOR:+(long,long):/(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):643:instant + offset |==> instant / offset
82:LOR:^(long,long):&(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:instant ^ adjustedInstant |==> instant & adjustedInstant
83:LOR:^(long,long):|(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:instant ^ adjustedInstant |==> instant | adjustedInstant
84:LVR:0:POS:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:0 |==> 1
85:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:0 |==> -1
86:ROR:<(long,long):!=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) != 0
87:ROR:<(long,long):<=(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 |==> (instant ^ adjustedInstant) <= 0
88:ROR:<(long,long):FALSE(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 |==> false
89:LOR:^(long,long):&(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:instant ^ offset |==> instant & offset
90:LOR:^(long,long):|(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:instant ^ offset |==> instant | offset
91:LVR:0:POS:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:0 |==> 1
92:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:0 |==> -1
93:ROR:>=(long,long):==(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ offset) >= 0 |==> (instant ^ offset) == 0
94:ROR:>=(long,long):>(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ offset) >= 0 |==> (instant ^ offset) > 0
95:ROR:>=(long,long):TRUE(long,long):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ offset) >= 0 |==> true
96:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ adjustedInstant) < 0 == (instant ^ offset) >= 0
97:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> false
98:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ adjustedInstant) < 0
99:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):644:(instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0 |==> (instant ^ offset) >= 0
100:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):646:zone = DateTimeZone.UTC |==> <NO-OP>
101:LVR:0:POS:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):647:0 |==> 1
102:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):647:0 |==> -1
103:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):647:offset = 0 |==> <NO-OP>
104:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):648:adjustedInstant = instant |==> <NO-OP>
105:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@printTo(java.io.Writer,long,org.joda.time.Chronology):650:printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale) |==> <NO-OP>
106:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@requirePrinter():660:printer == null |==> false
107:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):702:instant == null |==> false
108:AOR:+(long,long):%(long,long):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):709:instantMillis + chrono.getZone().getOffset(instantMillis) |==> instantMillis % chrono.getZone().getOffset(instantMillis)
109:AOR:+(long,long):*(long,long):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):709:instantMillis + chrono.getZone().getOffset(instantMillis) |==> instantMillis * chrono.getZone().getOffset(instantMillis)
110:AOR:+(long,long):-(long,long):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):709:instantMillis + chrono.getZone().getOffset(instantMillis) |==> instantMillis - chrono.getZone().getOffset(instantMillis)
111:AOR:+(long,long):/(long,long):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):709:instantMillis + chrono.getZone().getOffset(instantMillis) |==> instantMillis / chrono.getZone().getOffset(instantMillis)
112:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):710:chrono = selectChronology(chrono) |==> <NO-OP>
113:LVR:FALSE:TRUE:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):715:false |==> true
114:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):715:instant.setMillis(bucket.computeMillis(false, text)) |==> <NO-OP>
115:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:bucket.getOffsetInteger() != null |==> true
116:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed == (bucket.getOffsetInteger() != null)
117:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:iOffsetParsed && bucket.getOffsetInteger() != null |==> false
118:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed
119:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):716:iOffsetParsed && bucket.getOffsetInteger() != null |==> bucket.getOffsetInteger() != null
120:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):719:chrono = chrono.withZone(parsedZone) |==> <NO-OP>
121:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):720:bucket.getZone() != null |==> true
122:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):721:chrono = chrono.withZone(bucket.getZone()) |==> <NO-OP>
123:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):723:instant.setChronology(chrono) |==> <NO-OP>
124:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):724:iZone != null |==> true
125:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int):725:instant.setZone(iZone) |==> <NO-OP>
126:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):746:0 |==> 1
127:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):746:0 |==> -1
128:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):747:0 |==> 1
129:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):747:0 |==> -1
130:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:0 |==> 1
131:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:0 |==> -1
132:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:newPos >= 0 |==> newPos == 0
133:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:newPos >= 0 |==> newPos > 0
134:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):748:newPos >= 0 |==> true
135:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):749:newPos >= text.length() |==> newPos == text.length()
136:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):749:newPos >= text.length() |==> newPos > text.length()
137:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):749:newPos >= text.length() |==> true
138:LVR:TRUE:FALSE:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):750:true |==> false
139:ORU:~(int):+(int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):753:~newPos |==> +newPos
140:ORU:~(int):-(int):org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):753:~newPos |==> -newPos
141:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseMillis(java.lang.String):753:newPos = ~newPos |==> <NO-OP>
142:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):812:0 |==> 1
143:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):812:0 |==> -1
144:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):813:0 |==> 1
145:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):813:0 |==> -1
146:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:0 |==> 1
147:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:0 |==> -1
148:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:newPos >= 0 |==> newPos == 0
149:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:newPos >= 0 |==> newPos > 0
150:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):814:newPos >= 0 |==> true
151:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):815:newPos >= text.length() |==> newPos == text.length()
152:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):815:newPos >= text.length() |==> newPos > text.length()
153:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):815:newPos >= text.length() |==> true
154:LVR:TRUE:FALSE:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):816:true |==> false
155:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):817:bucket.getOffsetInteger() != null |==> true
156:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):820:chrono = chrono.withZone(parsedZone) |==> <NO-OP>
157:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):821:bucket.getZone() != null |==> true
158:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):822:chrono = chrono.withZone(bucket.getZone()) |==> <NO-OP>
159:ORU:~(int):+(int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):827:~newPos |==> +newPos
160:ORU:~(int):-(int):org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):827:~newPos |==> -newPos
161:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseLocalDateTime(java.lang.String):827:newPos = ~newPos |==> <NO-OP>
162:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):853:0 |==> 1
163:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):853:0 |==> -1
164:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):854:0 |==> 1
165:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):854:0 |==> -1
166:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:0 |==> 1
167:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:0 |==> -1
168:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:newPos >= 0 |==> newPos == 0
169:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:newPos >= 0 |==> newPos > 0
170:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):855:newPos >= 0 |==> true
171:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):856:newPos >= text.length() |==> newPos == text.length()
172:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):856:newPos >= text.length() |==> newPos > text.length()
173:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):856:newPos >= text.length() |==> true
174:LVR:TRUE:FALSE:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):857:true |==> false
175:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:bucket.getOffsetInteger() != null |==> true
176:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed == (bucket.getOffsetInteger() != null)
177:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:iOffsetParsed && bucket.getOffsetInteger() != null |==> false
178:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed
179:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):858:iOffsetParsed && bucket.getOffsetInteger() != null |==> bucket.getOffsetInteger() != null
180:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):861:chrono = chrono.withZone(parsedZone) |==> <NO-OP>
181:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):862:bucket.getZone() != null |==> true
182:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):863:chrono = chrono.withZone(bucket.getZone()) |==> <NO-OP>
183:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):866:iZone != null |==> true
184:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):867:dt = dt.withZone(iZone) |==> <NO-OP>
185:ORU:~(int):+(int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):872:~newPos |==> +newPos
186:ORU:~(int):-(int):org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):872:~newPos |==> -newPos
187:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseDateTime(java.lang.String):872:newPos = ~newPos |==> <NO-OP>
188:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):898:0 |==> 1
189:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):898:0 |==> -1
190:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):899:0 |==> 1
191:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):899:0 |==> -1
192:LVR:0:POS:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:0 |==> 1
193:LVR:0:NEG:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:0 |==> -1
194:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:newPos >= 0 |==> newPos == 0
195:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:newPos >= 0 |==> newPos > 0
196:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):900:newPos >= 0 |==> true
197:ROR:>=(int,int):==(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):901:newPos >= text.length() |==> newPos == text.length()
198:ROR:>=(int,int):>(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):901:newPos >= text.length() |==> newPos > text.length()
199:ROR:>=(int,int):TRUE(int,int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):901:newPos >= text.length() |==> true
200:LVR:TRUE:FALSE:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):902:true |==> false
201:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:bucket.getOffsetInteger() != null |==> true
202:COR:&&(boolean,boolean):==(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed == (bucket.getOffsetInteger() != null)
203:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:iOffsetParsed && bucket.getOffsetInteger() != null |==> false
204:COR:&&(boolean,boolean):LHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:iOffsetParsed && bucket.getOffsetInteger() != null |==> iOffsetParsed
205:COR:&&(boolean,boolean):RHS(boolean,boolean):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):903:iOffsetParsed && bucket.getOffsetInteger() != null |==> bucket.getOffsetInteger() != null
206:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):906:chrono = chrono.withZone(parsedZone) |==> <NO-OP>
207:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):907:bucket.getZone() != null |==> true
208:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):908:chrono = chrono.withZone(bucket.getZone()) |==> <NO-OP>
209:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):911:iZone != null |==> true
210:STD:<CALL>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):912:dt.setZone(iZone) |==> <NO-OP>
211:ORU:~(int):+(int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):917:~newPos |==> +newPos
212:ORU:~(int):-(int):org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):917:~newPos |==> -newPos
213:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@parseMutableDateTime(java.lang.String):917:newPos = ~newPos |==> <NO-OP>
214:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@requireParser():929:parser == null |==> false
215:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):943:chrono = DateTimeUtils.getChronology(chrono) |==> <NO-OP>
216:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):944:iChrono != null |==> true
217:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):945:chrono = iChrono |==> <NO-OP>
218:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):947:iZone != null |==> true
219:STD:<ASSIGN>:<NO-OP>:org.joda.time.format.DateTimeFormatter@selectChronology(org.joda.time.Chronology):948:chrono = chrono.withZone(iZone) |==> <NO-OP>
