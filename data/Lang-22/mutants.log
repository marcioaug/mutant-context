1:LVR:0:POS:org.apache.commons.lang3.math.Fraction:52:0 |==> 1
2:LVR:0:NEG:org.apache.commons.lang3.math.Fraction:52:0 |==> -1
3:LVR:POS:0:org.apache.commons.lang3.math.Fraction:52:1 |==> 0
4:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:52:1 |==> -1
5:LVR:POS:0:org.apache.commons.lang3.math.Fraction:56:1 |==> 0
6:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:56:1 |==> -1
7:LVR:POS:0:org.apache.commons.lang3.math.Fraction:56:1 |==> 0
8:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:56:1 |==> -1
9:LVR:POS:0:org.apache.commons.lang3.math.Fraction:60:1 |==> 0
10:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:60:1 |==> -1
11:LVR:POS:0:org.apache.commons.lang3.math.Fraction:60:2 |==> 0
12:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:60:2 |==> -2
13:LVR:POS:0:org.apache.commons.lang3.math.Fraction:64:1 |==> 0
14:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:64:1 |==> -1
15:LVR:POS:0:org.apache.commons.lang3.math.Fraction:64:3 |==> 0
16:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:64:3 |==> -3
17:LVR:POS:0:org.apache.commons.lang3.math.Fraction:68:2 |==> 0
18:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:68:2 |==> -2
19:LVR:POS:0:org.apache.commons.lang3.math.Fraction:68:3 |==> 0
20:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:68:3 |==> -3
21:LVR:POS:0:org.apache.commons.lang3.math.Fraction:72:1 |==> 0
22:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:72:1 |==> -1
23:LVR:POS:0:org.apache.commons.lang3.math.Fraction:72:4 |==> 0
24:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:72:4 |==> -4
25:LVR:POS:0:org.apache.commons.lang3.math.Fraction:76:2 |==> 0
26:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:76:2 |==> -2
27:LVR:POS:0:org.apache.commons.lang3.math.Fraction:76:4 |==> 0
28:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:76:4 |==> -4
29:LVR:POS:0:org.apache.commons.lang3.math.Fraction:80:3 |==> 0
30:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:80:3 |==> -3
31:LVR:POS:0:org.apache.commons.lang3.math.Fraction:80:4 |==> 0
32:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:80:4 |==> -4
33:LVR:POS:0:org.apache.commons.lang3.math.Fraction:84:1 |==> 0
34:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:84:1 |==> -1
35:LVR:POS:0:org.apache.commons.lang3.math.Fraction:84:5 |==> 0
36:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:84:5 |==> -5
37:LVR:POS:0:org.apache.commons.lang3.math.Fraction:88:2 |==> 0
38:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:88:2 |==> -2
39:LVR:POS:0:org.apache.commons.lang3.math.Fraction:88:5 |==> 0
40:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:88:5 |==> -5
41:LVR:POS:0:org.apache.commons.lang3.math.Fraction:92:3 |==> 0
42:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:92:3 |==> -3
43:LVR:POS:0:org.apache.commons.lang3.math.Fraction:92:5 |==> 0
44:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:92:5 |==> -5
45:LVR:POS:0:org.apache.commons.lang3.math.Fraction:96:4 |==> 0
46:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:96:4 |==> -4
47:LVR:POS:0:org.apache.commons.lang3.math.Fraction:96:5 |==> 0
48:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction:96:5 |==> -5
49:LVR:0:POS:org.apache.commons.lang3.math.Fraction:111:0 |==> 1
50:LVR:0:NEG:org.apache.commons.lang3.math.Fraction:111:0 |==> -1
51:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:0 |==> 1
52:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:0 |==> -1
53:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:denominator == 0 |==> denominator <= 0
54:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:denominator == 0 |==> denominator >= 0
55:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):147:denominator == 0 |==> false
56:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:0 |==> 1
57:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:0 |==> -1
58:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:denominator < 0 |==> denominator != 0
59:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:denominator < 0 |==> denominator <= 0
60:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):150:denominator < 0 |==> false
61:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
62:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
63:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE |==> false
64:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):152:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
65:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):152:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
66:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):152:denominator == Integer.MIN_VALUE |==> false
67:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE != (denominator == Integer.MIN_VALUE)
68:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE
69:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int):152:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> denominator == Integer.MIN_VALUE
70:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int):151:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> true
71:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):155:-numerator |==> +numerator
72:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):155:-numerator |==> ~numerator
73:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(int,int):155:numerator = -numerator |==> <NO-OP>
74:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):156:-denominator |==> +denominator
75:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@getFraction(int,int):156:-denominator |==> ~denominator
76:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(int,int):156:denominator = -denominator |==> <NO-OP>
77:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:0 |==> 1
78:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:0 |==> -1
79:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:denominator == 0 |==> denominator <= 0
80:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:denominator == 0 |==> denominator >= 0
81:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):178:denominator == 0 |==> false
82:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:0 |==> 1
83:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:0 |==> -1
84:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:denominator < 0 |==> denominator != 0
85:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:denominator < 0 |==> denominator <= 0
86:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):181:denominator < 0 |==> false
87:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:0 |==> 1
88:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:0 |==> -1
89:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:numerator < 0 |==> numerator != 0
90:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:numerator < 0 |==> numerator <= 0
91:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):184:numerator < 0 |==> false
92:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:0 |==> 1
93:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:0 |==> -1
94:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:whole < 0 |==> whole != 0
95:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:whole < 0 |==> whole <= 0
96:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):188:whole < 0 |==> false
97:AOR:*(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator |==> whole % (long)denominator
98:AOR:*(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator |==> whole + (long)denominator
99:AOR:*(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator |==> whole - (long)denominator
100:AOR:*(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator |==> whole / (long)denominator
101:AOR:-(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator - numerator |==> whole * (long)denominator % numerator
102:AOR:-(long,long):*(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator - numerator |==> whole * (long)denominator * numerator
103:AOR:-(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator - numerator |==> whole * (long)denominator + numerator
104:AOR:-(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):189:whole * (long)denominator - numerator |==> whole * (long)denominator / numerator
105:AOR:*(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator |==> whole % (long)denominator
106:AOR:*(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator |==> whole + (long)denominator
107:AOR:*(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator |==> whole - (long)denominator
108:AOR:*(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator |==> whole / (long)denominator
109:AOR:+(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator + numerator |==> whole * (long)denominator % numerator
110:AOR:+(long,long):*(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator + numerator |==> whole * (long)denominator * numerator
111:AOR:+(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator + numerator |==> whole * (long)denominator - numerator
112:AOR:+(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):191:whole * (long)denominator + numerator |==> whole * (long)denominator / numerator
113:ROR:<(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE |==> numeratorValue != Integer.MIN_VALUE
114:ROR:<(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE |==> numeratorValue <= Integer.MIN_VALUE
115:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE |==> false
116:ROR:>(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):194:numeratorValue > Integer.MAX_VALUE |==> numeratorValue != Integer.MAX_VALUE
117:ROR:>(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):194:numeratorValue > Integer.MAX_VALUE |==> numeratorValue >= Integer.MAX_VALUE
118:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):194:numeratorValue > Integer.MAX_VALUE |==> false
119:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MIN_VALUE != numeratorValue > Integer.MAX_VALUE
120:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MIN_VALUE
121:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):194:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue > Integer.MAX_VALUE
122:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(int,int,int):193:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> true
123:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:0 |==> 1
124:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:0 |==> -1
125:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:denominator == 0 |==> denominator <= 0
126:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:denominator == 0 |==> denominator >= 0
127:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):215:denominator == 0 |==> false
128:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:0 |==> 1
129:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:0 |==> -1
130:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:numerator == 0 |==> numerator <= 0
131:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:numerator == 0 |==> numerator >= 0
132:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):218:numerator == 0 |==> false
133:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
134:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
135:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> false
136:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:1 |==> 0
137:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:1 |==> -1
138:LOR:&(int,int):^(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:numerator & 1 |==> numerator ^ 1
139:LOR:&(int,int):|(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:numerator & 1 |==> numerator | 1
140:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:0 |==> 1
141:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:0 |==> -1
142:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:(numerator & 1) == 0 |==> (numerator & 1) <= 0
143:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:(numerator & 1) == 0 |==> (numerator & 1) >= 0
144:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:(numerator & 1) == 0 |==> false
145:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE == ((numerator & 1) == 0)
146:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> false
147:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE
148:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> (numerator & 1) == 0
149:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):223:2 |==> 0
150:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):223:2 |==> -2
151:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):223:numerator /= 2 |==> <NO-OP>
152:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):223:2 |==> 0
153:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):223:2 |==> -2
154:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):223:denominator /= 2 |==> <NO-OP>
155:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:0 |==> 1
156:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:0 |==> -1
157:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:denominator < 0 |==> denominator != 0
158:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:denominator < 0 |==> denominator <= 0
159:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):225:denominator < 0 |==> false
160:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
161:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
162:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE |==> false
163:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):227:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
164:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):227:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
165:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):227:denominator == Integer.MIN_VALUE |==> false
166:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE != (denominator == Integer.MIN_VALUE)
167:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE
168:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):227:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> denominator == Integer.MIN_VALUE
169:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):226:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> true
170:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):230:-numerator |==> +numerator
171:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):230:-numerator |==> ~numerator
172:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):230:numerator = -numerator |==> <NO-OP>
173:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):231:-denominator |==> +denominator
174:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):231:-denominator |==> ~denominator
175:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):231:denominator = -denominator |==> <NO-OP>
176:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):235:numerator /= gcd |==> <NO-OP>
177:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getReducedFraction(int,int):236:denominator /= gcd |==> <NO-OP>
178:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):255:0 |==> 1
179:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):255:0 |==> -1
180:ROR:<(double,double):!=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):255:value < 0 |==> value != 0
181:ROR:<(double,double):<=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):255:value < 0 |==> value <= 0
182:ROR:<(double,double):FALSE(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):255:value < 0 |==> false
183:LVR:NEG:0:org.apache.commons.lang3.math.Fraction@getFraction(double):255:-1 |==> 0
184:LVR:NEG:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):255:-1 |==> 1
185:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):255:1 |==> 0
186:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):255:1 |==> -1
187:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):256:value = Math.abs(value) |==> <NO-OP>
188:ROR:>(double,double):!=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE |==> value != Integer.MAX_VALUE
189:ROR:>(double,double):>=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE |==> value >= Integer.MAX_VALUE
190:ROR:>(double,double):FALSE(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE |==> false
191:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE || Double.isNaN(value) |==> value > Integer.MAX_VALUE != Double.isNaN(value)
192:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE || Double.isNaN(value) |==> value > Integer.MAX_VALUE
193:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE || Double.isNaN(value) |==> Double.isNaN(value)
194:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):257:value > Integer.MAX_VALUE || Double.isNaN(value) |==> true
195:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):262:value -= wholeNumber |==> <NO-OP>
196:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):264:0 |==> 1
197:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):264:0 |==> -1
198:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):265:1 |==> 0
199:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):265:1 |==> -1
200:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):266:1 |==> 0
201:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):266:1 |==> -1
202:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):267:0 |==> 1
203:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):267:0 |==> -1
204:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):268:0 |==> 1
205:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):268:0 |==> -1
206:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):269:0 |==> 1
207:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):269:0 |==> -1
208:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):271:0 |==> 1
209:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):271:0 |==> -1
210:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):272:1 |==> 0
211:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):272:1 |==> -1
212:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):273:0 |==> 1
213:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):273:0 |==> -1
214:AOR:-(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):274:value - a1 |==> value % a1
215:AOR:-(double,double):*(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):274:value - a1 |==> value * a1
216:AOR:-(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):274:value - a1 |==> value + a1
217:AOR:-(double,double):/(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):274:value - a1 |==> value / a1
218:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):275:0 |==> 1
219:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):275:0 |==> -1
220:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):278:1 |==> 0
221:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):278:1 |==> -1
222:AOR:/(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):282:x1 / y1 |==> x1 % y1
223:AOR:/(double,double):*(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):282:x1 / y1 |==> x1 * y1
224:AOR:/(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):282:x1 / y1 |==> x1 + y1
225:AOR:/(double,double):-(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):282:x1 / y1 |==> x1 - y1
226:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):282:a2 = (int)(x1 / y1) |==> <NO-OP>
227:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):283:x2 = y1 |==> <NO-OP>
228:AOR:*(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:a2 * y1 |==> a2 % y1
229:AOR:*(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:a2 * y1 |==> a2 + y1
230:AOR:*(double,double):-(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:a2 * y1 |==> a2 - y1
231:AOR:*(double,double):/(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:a2 * y1 |==> a2 / y1
232:AOR:-(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:x1 - a2 * y1 |==> x1 % (a2 * y1)
233:AOR:-(double,double):*(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:x1 - a2 * y1 |==> x1 * (a2 * y1)
234:AOR:-(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:x1 - a2 * y1 |==> x1 + a2 * y1
235:AOR:-(double,double):/(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):284:x1 - a2 * y1 |==> x1 / (a2 * y1)
236:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):284:y2 = x1 - a2 * y1 |==> <NO-OP>
237:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 |==> a1 % numer1
238:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 |==> a1 + numer1
239:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 |==> a1 - numer1
240:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 |==> a1 / numer1
241:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 + numer0 |==> a1 * numer1 % numer0
242:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 + numer0 |==> a1 * numer1 * numer0
243:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 + numer0 |==> a1 * numer1 - numer0
244:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):285:a1 * numer1 + numer0 |==> a1 * numer1 / numer0
245:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):285:numer2 = a1 * numer1 + numer0 |==> <NO-OP>
246:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 |==> a1 % denom1
247:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 |==> a1 + denom1
248:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 |==> a1 - denom1
249:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 |==> a1 / denom1
250:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 + denom0 |==> a1 * denom1 % denom0
251:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 + denom0 |==> a1 * denom1 * denom0
252:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 + denom0 |==> a1 * denom1 - denom0
253:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):286:a1 * denom1 + denom0 |==> a1 * denom1 / denom0
254:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):286:denom2 = a1 * denom1 + denom0 |==> <NO-OP>
255:AOR:/(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):287:(double)numer2 / (double)denom2 |==> (double)numer2 % (double)denom2
256:AOR:/(double,double):*(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):287:(double)numer2 / (double)denom2 |==> (double)numer2 * (double)denom2
257:AOR:/(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):287:(double)numer2 / (double)denom2 |==> (double)numer2 + (double)denom2
258:AOR:/(double,double):-(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):287:(double)numer2 / (double)denom2 |==> (double)numer2 - (double)denom2
259:AOR:-(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):288:value - fraction |==> value % fraction
260:AOR:-(double,double):*(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):288:value - fraction |==> value * fraction
261:AOR:-(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):288:value - fraction |==> value + fraction
262:AOR:-(double,double):/(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):288:value - fraction |==> value / fraction
263:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):288:delta2 = Math.abs(value - fraction) |==> <NO-OP>
264:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):290:a1 = a2 |==> <NO-OP>
265:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):291:x1 = x2 |==> <NO-OP>
266:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):292:y1 = y2 |==> <NO-OP>
267:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):293:numer0 = numer1 |==> <NO-OP>
268:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):294:denom0 = denom1 |==> <NO-OP>
269:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):295:numer1 = numer2 |==> <NO-OP>
270:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):296:denom1 = denom2 |==> <NO-OP>
271:STD:<INC>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(double):297:i++ |==> <NO-OP>
272:ROR:>(double,double):!=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):299:delta1 > delta2 |==> delta1 != delta2
273:ROR:>(double,double):>=(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):299:delta1 > delta2 |==> delta1 >= delta2
274:ROR:>(double,double):FALSE(double,double):org.apache.commons.lang3.math.Fraction@getFraction(double):299:delta1 > delta2 |==> false
275:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):299:10000 |==> 0
276:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):299:10000 |==> -10000
277:ROR:<=(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 <= 10000 |==> denom2 < 10000
278:ROR:<=(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 <= 10000 |==> denom2 == 10000
279:ROR:<=(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 <= 10000 |==> true
280:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) |==> (delta1 > delta2) == (denom2 <= 10000)
281:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) |==> false
282:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) |==> (delta1 > delta2)
283:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) |==> (denom2 <= 10000)
284:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(double):299:0 |==> 1
285:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):299:0 |==> -1
286:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 > 0 |==> denom2 != 0
287:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 > 0 |==> denom2 >= 0
288:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:denom2 > 0 |==> false
289:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> ((delta1 > delta2) && (denom2 <= 10000)) == (denom2 > 0)
290:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> false
291:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> (delta1 > delta2) && (denom2 <= 10000)
292:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> (denom2 > 0)
293:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):299:25 |==> 0
294:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):299:25 |==> -25
295:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:i < 25 |==> i != 25
296:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:i < 25 |==> i <= 25
297:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):299:i < 25 |==> false
298:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> ((delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0)) == (i < 25)
299:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> false
300:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> (delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0)
301:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@getFraction(double):299:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> (i < 25)
302:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(double):300:25 |==> 0
303:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(double):300:25 |==> -25
304:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):300:i == 25 |==> i <= 25
305:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):300:i == 25 |==> i >= 25
306:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):300:i == 25 |==> false
307:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:wholeNumber * denom0 |==> wholeNumber % denom0
308:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:wholeNumber * denom0 |==> wholeNumber + denom0
309:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:wholeNumber * denom0 |==> wholeNumber - denom0
310:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:wholeNumber * denom0 |==> wholeNumber / denom0
311:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:numer0 + wholeNumber * denom0 |==> numer0 % (wholeNumber * denom0)
312:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:numer0 + wholeNumber * denom0 |==> numer0 * (wholeNumber * denom0)
313:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:numer0 + wholeNumber * denom0 |==> numer0 - wholeNumber * denom0
314:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:numer0 + wholeNumber * denom0 |==> numer0 / (wholeNumber * denom0)
315:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) % sign
316:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) + sign
317:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) - sign
318:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(double):303:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) / sign
319:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):325:str == null |==> false
320:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:0 |==> 1
321:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:0 |==> -1
322:ROR:>=(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:pos >= 0 |==> pos == 0
323:ROR:>=(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:pos >= 0 |==> pos > 0
324:ROR:>=(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):330:pos >= 0 |==> true
325:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):335:pos = str.indexOf(' ') |==> <NO-OP>
326:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:0 |==> 1
327:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:0 |==> -1
328:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:pos > 0 |==> pos != 0
329:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:pos > 0 |==> pos >= 0
330:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):336:pos > 0 |==> false
331:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):337:0 |==> 1
332:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):337:0 |==> -1
333:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:1 |==> 0
334:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:1 |==> -1
335:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:pos + 1 |==> pos % 1
336:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:pos + 1 |==> pos * 1
337:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:pos + 1 |==> pos - 1
338:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:pos + 1 |==> pos / 1
339:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):338:str = str.substring(pos + 1) |==> <NO-OP>
340:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):339:pos = str.indexOf('/') |==> <NO-OP>
341:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:0 |==> 1
342:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:0 |==> -1
343:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:pos < 0 |==> pos != 0
344:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:pos < 0 |==> pos <= 0
345:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):340:pos < 0 |==> false
346:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):343:0 |==> 1
347:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):343:0 |==> -1
348:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):344:1 |==> 0
349:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):344:1 |==> -1
350:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):344:pos + 1 |==> pos % 1
351:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):344:pos + 1 |==> pos * 1
352:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):344:pos + 1 |==> pos - 1
353:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):344:pos + 1 |==> pos / 1
354:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):350:pos = str.indexOf('/') |==> <NO-OP>
355:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:0 |==> 1
356:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:0 |==> -1
357:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:pos < 0 |==> pos != 0
358:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:pos < 0 |==> pos <= 0
359:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):351:pos < 0 |==> false
360:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):353:1 |==> 0
361:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):353:1 |==> -1
362:LVR:0:POS:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):355:0 |==> 1
363:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):355:0 |==> -1
364:LVR:POS:0:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):356:1 |==> 0
365:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):356:1 |==> -1
366:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):356:pos + 1 |==> pos % 1
367:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):356:pos + 1 |==> pos * 1
368:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):356:pos + 1 |==> pos - 1
369:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getFraction(java.lang.String):356:pos + 1 |==> pos / 1
370:AOR:%(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getProperNumerator():397:numerator % denominator |==> numerator * denominator
371:AOR:%(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@getProperNumerator():397:numerator % denominator |==> numerator + denominator
372:AOR:%(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getProperNumerator():397:numerator % denominator |==> numerator - denominator
373:AOR:%(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@getProperNumerator():397:numerator % denominator |==> numerator / denominator
374:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@getProperWhole():412:numerator / denominator |==> numerator % denominator
375:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@getProperWhole():412:numerator / denominator |==> numerator * denominator
376:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@getProperWhole():412:numerator / denominator |==> numerator + denominator
377:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@getProperWhole():412:numerator / denominator |==> numerator - denominator
378:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@intValue():426:numerator / denominator |==> numerator % denominator
379:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@intValue():426:numerator / denominator |==> numerator * denominator
380:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@intValue():426:numerator / denominator |==> numerator + denominator
381:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@intValue():426:numerator / denominator |==> numerator - denominator
382:AOR:/(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@longValue():437:(long)numerator / denominator |==> (long)numerator % denominator
383:AOR:/(long,long):*(long,long):org.apache.commons.lang3.math.Fraction@longValue():437:(long)numerator / denominator |==> (long)numerator * denominator
384:AOR:/(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@longValue():437:(long)numerator / denominator |==> (long)numerator + denominator
385:AOR:/(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@longValue():437:(long)numerator / denominator |==> (long)numerator - denominator
386:AOR:/(float,float):%(float,float):org.apache.commons.lang3.math.Fraction@floatValue():448:((float)numerator) / ((float)denominator) |==> ((float)numerator) % ((float)denominator)
387:AOR:/(float,float):*(float,float):org.apache.commons.lang3.math.Fraction@floatValue():448:((float)numerator) / ((float)denominator) |==> ((float)numerator) * ((float)denominator)
388:AOR:/(float,float):+(float,float):org.apache.commons.lang3.math.Fraction@floatValue():448:((float)numerator) / ((float)denominator) |==> ((float)numerator) + ((float)denominator)
389:AOR:/(float,float):-(float,float):org.apache.commons.lang3.math.Fraction@floatValue():448:((float)numerator) / ((float)denominator) |==> ((float)numerator) - ((float)denominator)
390:AOR:/(double,double):%(double,double):org.apache.commons.lang3.math.Fraction@doubleValue():459:((double)numerator) / ((double)denominator) |==> ((double)numerator) % ((double)denominator)
391:AOR:/(double,double):*(double,double):org.apache.commons.lang3.math.Fraction@doubleValue():459:((double)numerator) / ((double)denominator) |==> ((double)numerator) * ((double)denominator)
392:AOR:/(double,double):+(double,double):org.apache.commons.lang3.math.Fraction@doubleValue():459:((double)numerator) / ((double)denominator) |==> ((double)numerator) + ((double)denominator)
393:AOR:/(double,double):-(double,double):org.apache.commons.lang3.math.Fraction@doubleValue():459:((double)numerator) / ((double)denominator) |==> ((double)numerator) - ((double)denominator)
394:LVR:0:POS:org.apache.commons.lang3.math.Fraction@reduce():475:0 |==> 1
395:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@reduce():475:0 |==> -1
396:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@reduce():475:numerator == 0 |==> numerator <= 0
397:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@reduce():475:numerator == 0 |==> numerator >= 0
398:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@reduce():475:numerator == 0 |==> false
399:COR:equals(ZERO):TRUE:org.apache.commons.lang3.math.Fraction@reduce():476:equals(ZERO) |==> false
400:COR:equals(ZERO):FALSE:org.apache.commons.lang3.math.Fraction@reduce():476:equals(ZERO) |==> true
401:LVR:POS:0:org.apache.commons.lang3.math.Fraction@reduce():479:1 |==> 0
402:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@reduce():479:1 |==> -1
403:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@reduce():479:gcd == 1 |==> gcd <= 1
404:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@reduce():479:gcd == 1 |==> gcd >= 1
405:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@reduce():479:gcd == 1 |==> false
406:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:numerator / gcd |==> numerator % gcd
407:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:numerator / gcd |==> numerator * gcd
408:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:numerator / gcd |==> numerator + gcd
409:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:numerator / gcd |==> numerator - gcd
410:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:denominator / gcd |==> denominator % gcd
411:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:denominator / gcd |==> denominator * gcd
412:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:denominator / gcd |==> denominator + gcd
413:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@reduce():482:denominator / gcd |==> denominator - gcd
414:LVR:0:POS:org.apache.commons.lang3.math.Fraction@invert():495:0 |==> 1
415:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@invert():495:0 |==> -1
416:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@invert():495:numerator == 0 |==> numerator <= 0
417:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@invert():495:numerator == 0 |==> numerator >= 0
418:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@invert():495:numerator == 0 |==> false
419:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@invert():498:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
420:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@invert():498:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
421:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@invert():498:numerator == Integer.MIN_VALUE |==> false
422:LVR:0:POS:org.apache.commons.lang3.math.Fraction@invert():501:0 |==> 1
423:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@invert():501:0 |==> -1
424:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@invert():501:numerator < 0 |==> numerator != 0
425:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@invert():501:numerator < 0 |==> numerator <= 0
426:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@invert():501:numerator < 0 |==> false
427:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@invert():502:-denominator |==> +denominator
428:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@invert():502:-denominator |==> ~denominator
429:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@invert():502:-numerator |==> +numerator
430:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@invert():502:-numerator |==> ~numerator
431:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@negate():517:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
432:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@negate():517:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
433:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@negate():517:numerator == Integer.MIN_VALUE |==> false
434:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@negate():520:-numerator |==> +numerator
435:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@negate():520:-numerator |==> ~numerator
436:LVR:0:POS:org.apache.commons.lang3.math.Fraction@abs():533:0 |==> 1
437:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@abs():533:0 |==> -1
438:ROR:>=(int,int):==(int,int):org.apache.commons.lang3.math.Fraction@abs():533:numerator >= 0 |==> numerator == 0
439:ROR:>=(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@abs():533:numerator >= 0 |==> numerator > 0
440:ROR:>=(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@abs():533:numerator >= 0 |==> true
441:LVR:POS:0:org.apache.commons.lang3.math.Fraction@pow(int):552:1 |==> 0
442:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@pow(int):552:1 |==> -1
443:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):552:power == 1 |==> power <= 1
444:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):552:power == 1 |==> power >= 1
445:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):552:power == 1 |==> false
446:LVR:0:POS:org.apache.commons.lang3.math.Fraction@pow(int):554:0 |==> 1
447:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@pow(int):554:0 |==> -1
448:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):554:power == 0 |==> power <= 0
449:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):554:power == 0 |==> power >= 0
450:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):554:power == 0 |==> false
451:LVR:0:POS:org.apache.commons.lang3.math.Fraction@pow(int):556:0 |==> 1
452:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@pow(int):556:0 |==> -1
453:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):556:power < 0 |==> power != 0
454:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):556:power < 0 |==> power <= 0
455:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):556:power < 0 |==> false
456:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):557:power == Integer.MIN_VALUE |==> power <= Integer.MIN_VALUE
457:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):557:power == Integer.MIN_VALUE |==> power >= Integer.MIN_VALUE
458:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):557:power == Integer.MIN_VALUE |==> false
459:LVR:POS:0:org.apache.commons.lang3.math.Fraction@pow(int):558:2 |==> 0
460:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@pow(int):558:2 |==> -2
461:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@pow(int):558:-(power / 2) |==> +(power / 2)
462:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@pow(int):558:-(power / 2) |==> ~(power / 2)
463:LVR:POS:0:org.apache.commons.lang3.math.Fraction@pow(int):558:2 |==> 0
464:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@pow(int):558:2 |==> -2
465:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@pow(int):558:power / 2 |==> power % 2
466:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@pow(int):558:power / 2 |==> power * 2
467:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@pow(int):558:power / 2 |==> power + 2
468:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@pow(int):558:power / 2 |==> power - 2
469:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@pow(int):560:-power |==> +power
470:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@pow(int):560:-power |==> ~power
471:LVR:POS:0:org.apache.commons.lang3.math.Fraction@pow(int):563:2 |==> 0
472:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@pow(int):563:2 |==> -2
473:AOR:%(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:power % 2 |==> power * 2
474:AOR:%(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:power % 2 |==> power + 2
475:AOR:%(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:power % 2 |==> power - 2
476:AOR:%(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:power % 2 |==> power / 2
477:LVR:0:POS:org.apache.commons.lang3.math.Fraction@pow(int):563:0 |==> 1
478:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@pow(int):563:0 |==> -1
479:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:(power % 2) == 0 |==> (power % 2) <= 0
480:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:(power % 2) == 0 |==> (power % 2) >= 0
481:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@pow(int):563:(power % 2) == 0 |==> false
482:LVR:POS:0:org.apache.commons.lang3.math.Fraction@pow(int):564:2 |==> 0
483:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@pow(int):564:2 |==> -2
484:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@pow(int):564:power / 2 |==> power % 2
485:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@pow(int):564:power / 2 |==> power * 2
486:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@pow(int):564:power / 2 |==> power + 2
487:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@pow(int):564:power / 2 |==> power - 2
488:LVR:POS:0:org.apache.commons.lang3.math.Fraction@pow(int):566:2 |==> 0
489:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@pow(int):566:2 |==> -2
490:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@pow(int):566:power / 2 |==> power % 2
491:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@pow(int):566:power / 2 |==> power * 2
492:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@pow(int):566:power / 2 |==> power + 2
493:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@pow(int):566:power / 2 |==> power - 2
494:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:0 |==> 1
495:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:0 |==> -1
496:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:u == 0 |==> u <= 0
497:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:u == 0 |==> u >= 0
498:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:u == 0 |==> false
499:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:0 |==> 1
500:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:0 |==> -1
501:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:v == 0 |==> v <= 0
502:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:v == 0 |==> v >= 0
503:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:v == 0 |==> false
504:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:(u == 0) || (v == 0) |==> (u == 0) != (v == 0)
505:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:(u == 0) || (v == 0) |==> (u == 0)
506:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:(u == 0) || (v == 0) |==> (v == 0)
507:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):583:(u == 0) || (v == 0) |==> true
508:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:u == Integer.MIN_VALUE |==> u <= Integer.MIN_VALUE
509:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:u == Integer.MIN_VALUE |==> u >= Integer.MIN_VALUE
510:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:u == Integer.MIN_VALUE |==> false
511:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:v == Integer.MIN_VALUE |==> v <= Integer.MIN_VALUE
512:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:v == Integer.MIN_VALUE |==> v >= Integer.MIN_VALUE
513:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:v == Integer.MIN_VALUE |==> false
514:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:(u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE) |==> (u == Integer.MIN_VALUE) != (v == Integer.MIN_VALUE)
515:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:(u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE) |==> (u == Integer.MIN_VALUE)
516:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:(u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE) |==> (v == Integer.MIN_VALUE)
517:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):584:(u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE) |==> true
518:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):587:Math.abs(u) + Math.abs(v) |==> Math.abs(u) % Math.abs(v)
519:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):587:Math.abs(u) + Math.abs(v) |==> Math.abs(u) * Math.abs(v)
520:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):587:Math.abs(u) + Math.abs(v) |==> Math.abs(u) - Math.abs(v)
521:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):587:Math.abs(u) + Math.abs(v) |==> Math.abs(u) / Math.abs(v)
522:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:1 |==> 0
523:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:1 |==> -1
524:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 |==> Math.abs(u) <= 1
525:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 |==> Math.abs(u) >= 1
526:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 |==> false
527:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:1 |==> 0
528:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:1 |==> -1
529:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(v) == 1 |==> Math.abs(v) <= 1
530:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(v) == 1 |==> Math.abs(v) >= 1
531:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(v) == 1 |==> false
532:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 || Math.abs(v) == 1 |==> Math.abs(u) == 1 != (Math.abs(v) == 1)
533:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 || Math.abs(v) == 1 |==> Math.abs(u) == 1
534:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 || Math.abs(v) == 1 |==> Math.abs(v) == 1
535:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):590:Math.abs(u) == 1 || Math.abs(v) == 1 |==> true
536:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):591:1 |==> 0
537:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):591:1 |==> -1
538:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:0 |==> 1
539:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:0 |==> -1
540:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:u > 0 |==> u != 0
541:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:u > 0 |==> u >= 0
542:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:u > 0 |==> false
543:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:-u |==> +u
544:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:-u |==> ~u
545:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):597:u = -u |==> <NO-OP>
546:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:0 |==> 1
547:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:0 |==> -1
548:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:v > 0 |==> v != 0
549:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:v > 0 |==> v >= 0
550:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:v > 0 |==> false
551:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:-v |==> +v
552:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:-v |==> ~v
553:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):598:v = -v |==> <NO-OP>
554:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):600:0 |==> 1
555:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):600:0 |==> -1
556:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:1 |==> 0
557:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:1 |==> -1
558:LOR:&(int,int):^(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:u & 1 |==> u ^ 1
559:LOR:&(int,int):|(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:u & 1 |==> u | 1
560:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:0 |==> 1
561:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:0 |==> -1
562:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 |==> (u & 1) <= 0
563:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 |==> (u & 1) >= 0
564:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 |==> false
565:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:1 |==> 0
566:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:1 |==> -1
567:LOR:&(int,int):^(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:v & 1 |==> v ^ 1
568:LOR:&(int,int):|(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:v & 1 |==> v | 1
569:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:0 |==> 1
570:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:0 |==> -1
571:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(v & 1) == 0 |==> (v & 1) <= 0
572:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(v & 1) == 0 |==> (v & 1) >= 0
573:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(v & 1) == 0 |==> false
574:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 |==> (u & 1) == 0 == ((v & 1) == 0)
575:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 |==> false
576:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 |==> (u & 1) == 0
577:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 |==> (v & 1) == 0
578:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:31 |==> 0
579:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:31 |==> -31
580:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:k < 31 |==> k != 31
581:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:k < 31 |==> k <= 31
582:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:k < 31 |==> false
583:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> ((u & 1) == 0 && (v & 1) == 0) == k < 31
584:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> false
585:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> (u & 1) == 0 && (v & 1) == 0
586:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):601:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> k < 31
587:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:2 |==> 0
588:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:2 |==> -2
589:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:u /= 2 |==> <NO-OP>
590:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:2 |==> 0
591:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:2 |==> -2
592:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:v /= 2 |==> <NO-OP>
593:STD:<INC>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):602:k++ |==> <NO-OP>
594:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:31 |==> 0
595:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:31 |==> -31
596:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:k == 31 |==> k <= 31
597:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:k == 31 |==> k >= 31
598:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):604:k == 31 |==> false
599:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:1 |==> 0
600:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:1 |==> -1
601:LOR:&(int,int):^(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:u & 1 |==> u ^ 1
602:LOR:&(int,int):|(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:u & 1 |==> u | 1
603:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:1 |==> 0
604:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:1 |==> -1
605:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:(u & 1) == 1 |==> (u & 1) <= 1
606:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:(u & 1) == 1 |==> (u & 1) >= 1
607:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:(u & 1) == 1 |==> false
608:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:-(u / 2) |==> +(u / 2)
609:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:-(u / 2) |==> ~(u / 2)
610:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:2 |==> 0
611:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:2 |==> -2
612:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:u / 2 |==> u % 2
613:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:u / 2 |==> u * 2
614:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:u / 2 |==> u + 2
615:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):609:u / 2 |==> u - 2
616:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:1 |==> 0
617:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:1 |==> -1
618:LOR:&(int,int):^(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:t & 1 |==> t ^ 1
619:LOR:&(int,int):|(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:t & 1 |==> t | 1
620:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:0 |==> 1
621:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:0 |==> -1
622:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:(t & 1) == 0 |==> (t & 1) <= 0
623:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:(t & 1) == 0 |==> (t & 1) >= 0
624:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):615:(t & 1) == 0 |==> false
625:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):616:2 |==> 0
626:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):616:2 |==> -2
627:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):616:t /= 2 |==> <NO-OP>
628:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:0 |==> 1
629:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:0 |==> -1
630:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:t > 0 |==> t != 0
631:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:t > 0 |==> t >= 0
632:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):619:t > 0 |==> false
633:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):620:-t |==> +t
634:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):620:-t |==> ~t
635:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):620:u = -t |==> <NO-OP>
636:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):622:v = t |==> <NO-OP>
637:AOR:-(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:v - u |==> v % u
638:AOR:-(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:v - u |==> v * u
639:AOR:-(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:v - u |==> v + u
640:AOR:-(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:v - u |==> v / u
641:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:2 |==> 0
642:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:2 |==> -2
643:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:(v - u) / 2 |==> (v - u) % 2
644:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:(v - u) / 2 |==> (v - u) * 2
645:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:(v - u) / 2 |==> (v - u) + 2
646:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:(v - u) / 2 |==> (v - u) - 2
647:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):625:t = (v - u) / 2 |==> <NO-OP>
648:LVR:0:POS:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:0 |==> 1
649:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:0 |==> -1
650:ROR:!=(int,int):<(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:t != 0 |==> t < 0
651:ROR:!=(int,int):>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:t != 0 |==> t > 0
652:ROR:!=(int,int):TRUE(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):628:t != 0 |==> true
653:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:-u |==> +u
654:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:-u |==> ~u
655:LVR:POS:0:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:1 |==> 0
656:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:1 |==> -1
657:SOR:<<(int,int):>>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:1 << k |==> 1 >> k
658:SOR:<<(int,int):>>>(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:1 << k |==> 1 >>> k
659:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:-u * (1 << k) |==> -u % (1 << k)
660:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:-u * (1 << k) |==> -u + (1 << k)
661:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:-u * (1 << k) |==> -u - (1 << k)
662:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@greatestCommonDivisor(int,int):629:-u * (1 << k) |==> -u / (1 << k)
663:AOR:*(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):645:((long)x) * ((long)y) |==> ((long)x) % ((long)y)
664:AOR:*(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):645:((long)x) * ((long)y) |==> ((long)x) + ((long)y)
665:AOR:*(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):645:((long)x) * ((long)y) |==> ((long)x) - ((long)y)
666:AOR:*(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):645:((long)x) * ((long)y) |==> ((long)x) / ((long)y)
667:ROR:<(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE |==> m != Integer.MIN_VALUE
668:ROR:<(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE |==> m <= Integer.MIN_VALUE
669:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE |==> false
670:ROR:>(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):647:m > Integer.MAX_VALUE |==> m != Integer.MAX_VALUE
671:ROR:>(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):647:m > Integer.MAX_VALUE |==> m >= Integer.MAX_VALUE
672:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):647:m > Integer.MAX_VALUE |==> false
673:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m < Integer.MIN_VALUE != m > Integer.MAX_VALUE
674:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m < Integer.MIN_VALUE
675:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):647:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m > Integer.MAX_VALUE
676:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@mulAndCheck(int,int):646:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> true
677:AOR:*(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):664:((long)x) * ((long)y) |==> ((long)x) % ((long)y)
678:AOR:*(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):664:((long)x) * ((long)y) |==> ((long)x) + ((long)y)
679:AOR:*(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):664:((long)x) * ((long)y) |==> ((long)x) - ((long)y)
680:AOR:*(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):664:((long)x) * ((long)y) |==> ((long)x) / ((long)y)
681:ROR:>(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):665:m > Integer.MAX_VALUE |==> m != Integer.MAX_VALUE
682:ROR:>(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):665:m > Integer.MAX_VALUE |==> m >= Integer.MAX_VALUE
683:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@mulPosAndCheck(int,int):665:m > Integer.MAX_VALUE |==> false
684:AOR:+(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):681:(long)x + (long)y |==> (long)x % (long)y
685:AOR:+(long,long):*(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):681:(long)x + (long)y |==> (long)x * (long)y
686:AOR:+(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):681:(long)x + (long)y |==> (long)x - (long)y
687:AOR:+(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):681:(long)x + (long)y |==> (long)x / (long)y
688:ROR:<(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE |==> s != Integer.MIN_VALUE
689:ROR:<(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE |==> s <= Integer.MIN_VALUE
690:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE |==> false
691:ROR:>(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):683:s > Integer.MAX_VALUE |==> s != Integer.MAX_VALUE
692:ROR:>(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):683:s > Integer.MAX_VALUE |==> s >= Integer.MAX_VALUE
693:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):683:s > Integer.MAX_VALUE |==> false
694:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE != s > Integer.MAX_VALUE
695:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE
696:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):683:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s > Integer.MAX_VALUE
697:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@addAndCheck(int,int):682:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> true
698:AOR:-(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):699:(long)x - (long)y |==> (long)x % (long)y
699:AOR:-(long,long):*(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):699:(long)x - (long)y |==> (long)x * (long)y
700:AOR:-(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):699:(long)x - (long)y |==> (long)x + (long)y
701:AOR:-(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):699:(long)x - (long)y |==> (long)x / (long)y
702:ROR:<(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE |==> s != Integer.MIN_VALUE
703:ROR:<(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE |==> s <= Integer.MIN_VALUE
704:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE |==> false
705:ROR:>(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):701:s > Integer.MAX_VALUE |==> s != Integer.MAX_VALUE
706:ROR:>(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):701:s > Integer.MAX_VALUE |==> s >= Integer.MAX_VALUE
707:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):701:s > Integer.MAX_VALUE |==> false
708:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE != s > Integer.MAX_VALUE
709:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE
710:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):701:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s > Integer.MAX_VALUE
711:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@subAndCheck(int,int):700:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> true
712:LVR:TRUE:FALSE:org.apache.commons.lang3.math.Fraction@add(org.apache.commons.lang3.math.Fraction):718:true |==> false
713:LVR:FALSE:TRUE:org.apache.commons.lang3.math.Fraction@subtract(org.apache.commons.lang3.math.Fraction):732:false |==> true
714:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):746:fraction == null |==> false
715:LVR:0:POS:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:0 |==> 1
716:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:0 |==> -1
717:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:numerator == 0 |==> numerator <= 0
718:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:numerator == 0 |==> numerator >= 0
719:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):750:numerator == 0 |==> false
720:COR:isAdd:TRUE:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):751:isAdd |==> false
721:COR:isAdd:FALSE:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):751:isAdd |==> true
722:LVR:0:POS:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:0 |==> 1
723:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:0 |==> -1
724:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:fraction.numerator == 0 |==> fraction.numerator <= 0
725:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:fraction.numerator == 0 |==> fraction.numerator >= 0
726:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):753:fraction.numerator == 0 |==> false
727:LVR:POS:0:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:1 |==> 0
728:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:1 |==> -1
729:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:d1 == 1 |==> d1 <= 1
730:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:d1 == 1 |==> d1 >= 1
731:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):759:d1 == 1 |==> false
732:COR:isAdd:TRUE:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):764:isAdd |==> false
733:COR:isAdd:FALSE:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):764:isAdd |==> true
734:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):771:fraction.denominator / d1 |==> fraction.denominator % d1
735:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):771:fraction.denominator / d1 |==> fraction.denominator * d1
736:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):771:fraction.denominator / d1 |==> fraction.denominator + d1
737:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):771:fraction.denominator / d1 |==> fraction.denominator - d1
738:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):773:denominator / d1 |==> denominator % d1
739:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):773:denominator / d1 |==> denominator * d1
740:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):773:denominator / d1 |==> denominator + d1
741:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):773:denominator / d1 |==> denominator - d1
742:COR:isAdd:TRUE:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):774:isAdd |==> false
743:COR:isAdd:FALSE:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):774:isAdd |==> true
744:LVR:0:POS:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:0 |==> 1
745:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:0 |==> -1
746:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:tmodd1 == 0 |==> tmodd1 <= 0
747:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:tmodd1 == 0 |==> tmodd1 >= 0
748:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):778:tmodd1 == 0 |==> false
749:LVR:POS:0:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:31 |==> 0
750:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:31 |==> -31
751:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:w.bitLength() > 31 |==> w.bitLength() != 31
752:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:w.bitLength() > 31 |==> w.bitLength() >= 31
753:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):782:w.bitLength() > 31 |==> false
754:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:denominator / d1 |==> denominator % d1
755:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:denominator / d1 |==> denominator * d1
756:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:denominator / d1 |==> denominator + d1
757:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:denominator / d1 |==> denominator - d1
758:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:fraction.denominator / d2 |==> fraction.denominator % d2
759:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:fraction.denominator / d2 |==> fraction.denominator * d2
760:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:fraction.denominator / d2 |==> fraction.denominator + d2
761:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@addSub(org.apache.commons.lang3.math.Fraction,boolean):788:fraction.denominator / d2 |==> fraction.denominator - d2
762:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):802:fraction == null |==> false
763:LVR:0:POS:org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:0 |==> 1
764:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:0 |==> -1
765:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 |==> numerator <= 0
766:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 |==> numerator >= 0
767:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 |==> false
768:LVR:0:POS:org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:0 |==> 1
769:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:0 |==> -1
770:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:fraction.numerator == 0 |==> fraction.numerator <= 0
771:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:fraction.numerator == 0 |==> fraction.numerator >= 0
772:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:fraction.numerator == 0 |==> false
773:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 != (fraction.numerator == 0)
774:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 || fraction.numerator == 0 |==> numerator == 0
775:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 || fraction.numerator == 0 |==> fraction.numerator == 0
776:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):805:numerator == 0 || fraction.numerator == 0 |==> true
777:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:numerator / d1 |==> numerator % d1
778:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:numerator / d1 |==> numerator * d1
779:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:numerator / d1 |==> numerator + d1
780:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:numerator / d1 |==> numerator - d1
781:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:fraction.numerator / d2 |==> fraction.numerator % d2
782:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:fraction.numerator / d2 |==> fraction.numerator * d2
783:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:fraction.numerator / d2 |==> fraction.numerator + d2
784:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):813:fraction.numerator / d2 |==> fraction.numerator - d2
785:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:denominator / d2 |==> denominator % d2
786:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:denominator / d2 |==> denominator * d2
787:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:denominator / d2 |==> denominator + d2
788:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:denominator / d2 |==> denominator - d2
789:AOR:/(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:fraction.denominator / d1 |==> fraction.denominator % d1
790:AOR:/(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:fraction.denominator / d1 |==> fraction.denominator * d1
791:AOR:/(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:fraction.denominator / d1 |==> fraction.denominator + d1
792:AOR:/(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@multiplyBy(org.apache.commons.lang3.math.Fraction):814:fraction.denominator / d1 |==> fraction.denominator - d1
793:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):828:fraction == null |==> false
794:LVR:0:POS:org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:0 |==> 1
795:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:0 |==> -1
796:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:fraction.numerator == 0 |==> fraction.numerator <= 0
797:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:fraction.numerator == 0 |==> fraction.numerator >= 0
798:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@divideBy(org.apache.commons.lang3.math.Fraction):831:fraction.numerator == 0 |==> false
799:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):850:obj == this |==> false
800:LVR:TRUE:FALSE:org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):851:true |==> false
801:LVR:FALSE:TRUE:org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):853:false |==> true
802:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):853:obj instanceof Fraction == false |==> false
803:ROR:==(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):853:obj instanceof Fraction == false |==> obj instanceof Fraction
804:ROR:==(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):853:obj instanceof Fraction == false |==> false
805:LVR:FALSE:TRUE:org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):854:false |==> true
806:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() |==> getNumerator() <= other.getNumerator()
807:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() |==> getNumerator() >= other.getNumerator()
808:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() |==> false
809:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):858:getDenominator() == other.getDenominator() |==> getDenominator() <= other.getDenominator()
810:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):858:getDenominator() == other.getDenominator() |==> getDenominator() >= other.getDenominator()
811:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):858:getDenominator() == other.getDenominator() |==> false
812:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getNumerator() == other.getNumerator() == (getDenominator() == other.getDenominator())
813:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> false
814:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):857:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getNumerator() == other.getNumerator()
815:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@equals(java.lang.Object):858:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getDenominator() == other.getDenominator()
816:LVR:0:POS:org.apache.commons.lang3.math.Fraction@hashCode():868:0 |==> 1
817:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@hashCode():868:0 |==> -1
818:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@hashCode():868:hashCode == 0 |==> hashCode <= 0
819:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@hashCode():868:hashCode == 0 |==> hashCode >= 0
820:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@hashCode():868:hashCode == 0 |==> false
821:LVR:POS:0:org.apache.commons.lang3.math.Fraction@hashCode():870:37 |==> 0
822:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@hashCode():870:37 |==> -37
823:LVR:POS:0:org.apache.commons.lang3.math.Fraction@hashCode():870:37 |==> 0
824:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@hashCode():870:37 |==> -37
825:LVR:POS:0:org.apache.commons.lang3.math.Fraction@hashCode():870:17 |==> 0
826:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@hashCode():870:17 |==> -17
827:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 |==> 37 % 17
828:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 |==> 37 + 17
829:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 |==> 37 - 17
830:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 |==> 37 / 17
831:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 + getNumerator() |==> 37 * 17 % getNumerator()
832:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 + getNumerator() |==> 37 * 17 * getNumerator()
833:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 + getNumerator() |==> 37 * 17 - getNumerator()
834:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * 17 + getNumerator() |==> 37 * 17 / getNumerator()
835:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) |==> 37 % (37 * 17 + getNumerator())
836:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) |==> 37 + (37 * 17 + getNumerator())
837:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) |==> 37 - (37 * 17 + getNumerator())
838:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) |==> 37 / (37 * 17 + getNumerator())
839:AOR:+(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) % getDenominator()
840:AOR:+(int,int):*(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) * getDenominator()
841:AOR:+(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) - getDenominator()
842:AOR:+(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@hashCode():870:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) / getDenominator()
843:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@hashCode():870:hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator() |==> <NO-OP>
844:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):888:this == other |==> false
845:LVR:0:POS:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):889:0 |==> 1
846:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):889:0 |==> -1
847:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator |==> numerator <= other.numerator
848:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator |==> numerator >= other.numerator
849:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator |==> false
850:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:denominator == other.denominator |==> denominator <= other.denominator
851:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:denominator == other.denominator |==> denominator >= other.denominator
852:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:denominator == other.denominator |==> false
853:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator && denominator == other.denominator |==> numerator == other.numerator == (denominator == other.denominator)
854:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator && denominator == other.denominator |==> false
855:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator && denominator == other.denominator |==> numerator == other.numerator
856:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):891:numerator == other.numerator && denominator == other.denominator |==> denominator == other.denominator
857:LVR:0:POS:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):892:0 |==> 1
858:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):892:0 |==> -1
859:AOR:*(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):896:(long)numerator * (long)other.denominator |==> (long)numerator % (long)other.denominator
860:AOR:*(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):896:(long)numerator * (long)other.denominator |==> (long)numerator + (long)other.denominator
861:AOR:*(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):896:(long)numerator * (long)other.denominator |==> (long)numerator - (long)other.denominator
862:AOR:*(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):896:(long)numerator * (long)other.denominator |==> (long)numerator / (long)other.denominator
863:AOR:*(long,long):%(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):897:(long)other.numerator * (long)denominator |==> (long)other.numerator % (long)denominator
864:AOR:*(long,long):+(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):897:(long)other.numerator * (long)denominator |==> (long)other.numerator + (long)denominator
865:AOR:*(long,long):-(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):897:(long)other.numerator * (long)denominator |==> (long)other.numerator - (long)denominator
866:AOR:*(long,long):/(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):897:(long)other.numerator * (long)denominator |==> (long)other.numerator / (long)denominator
867:ROR:==(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):898:first == second |==> first <= second
868:ROR:==(long,long):>=(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):898:first == second |==> first >= second
869:ROR:==(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):898:first == second |==> false
870:LVR:0:POS:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):899:0 |==> 1
871:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):899:0 |==> -1
872:ROR:<(long,long):!=(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):900:first < second |==> first != second
873:ROR:<(long,long):<=(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):900:first < second |==> first <= second
874:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):900:first < second |==> false
875:LVR:NEG:0:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):901:-1 |==> 0
876:LVR:NEG:POS:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):901:-1 |==> 1
877:LVR:POS:0:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):903:1 |==> 0
878:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@compareTo(org.apache.commons.lang3.math.Fraction):903:1 |==> -1
879:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@toString():916:toString == null |==> false
880:LVR:POS:0:org.apache.commons.lang3.math.Fraction@toString():917:32 |==> 0
881:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@toString():917:32 |==> -32
882:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toString():917:toString = new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString() |==> <NO-OP>
883:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang3.math.Fraction@toProperString():935:toProperString == null |==> false
884:LVR:0:POS:org.apache.commons.lang3.math.Fraction@toProperString():936:0 |==> 1
885:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@toProperString():936:0 |==> -1
886:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():936:numerator == 0 |==> numerator <= 0
887:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():936:numerator == 0 |==> numerator >= 0
888:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():936:numerator == 0 |==> false
889:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toProperString():937:toProperString = "0" |==> <NO-OP>
890:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():938:numerator == denominator |==> numerator <= denominator
891:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():938:numerator == denominator |==> numerator >= denominator
892:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():938:numerator == denominator |==> false
893:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toProperString():939:toProperString = "1" |==> <NO-OP>
894:LVR:NEG:0:org.apache.commons.lang3.math.Fraction@toProperString():940:-1 |==> 0
895:LVR:NEG:POS:org.apache.commons.lang3.math.Fraction@toProperString():940:-1 |==> 1
896:AOR:*(int,int):%(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:-1 * denominator |==> -1 % denominator
897:AOR:*(int,int):+(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:-1 * denominator |==> -1 + denominator
898:AOR:*(int,int):-(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:-1 * denominator |==> -1 - denominator
899:AOR:*(int,int):/(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:-1 * denominator |==> -1 / denominator
900:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:numerator == -1 * denominator |==> numerator <= -1 * denominator
901:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:numerator == -1 * denominator |==> numerator >= -1 * denominator
902:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():940:numerator == -1 * denominator |==> false
903:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toProperString():941:toProperString = "-1" |==> <NO-OP>
904:LVR:0:POS:org.apache.commons.lang3.math.Fraction@toProperString():942:0 |==> 1
905:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@toProperString():942:0 |==> -1
906:ROR:>(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:numerator > 0 |==> numerator != 0
907:ROR:>(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:numerator > 0 |==> numerator >= 0
908:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:numerator > 0 |==> false
909:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@toProperString():942:-numerator |==> +numerator
910:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@toProperString():942:-numerator |==> ~numerator
911:ORU:-(int):+(int):org.apache.commons.lang3.math.Fraction@toProperString():942:-denominator |==> +denominator
912:ORU:-(int):~(int):org.apache.commons.lang3.math.Fraction@toProperString():942:-denominator |==> ~denominator
913:ROR:<(int,int):!=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) != -denominator
914:ROR:<(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) <= -denominator
915:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():942:(numerator > 0 ? -numerator : numerator) < -denominator |==> false
916:LVR:0:POS:org.apache.commons.lang3.math.Fraction@toProperString():948:0 |==> 1
917:LVR:0:NEG:org.apache.commons.lang3.math.Fraction@toProperString():948:0 |==> -1
918:ROR:==(int,int):<=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():948:properNumerator == 0 |==> properNumerator <= 0
919:ROR:==(int,int):>=(int,int):org.apache.commons.lang3.math.Fraction@toProperString():948:properNumerator == 0 |==> properNumerator >= 0
920:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang3.math.Fraction@toProperString():948:properNumerator == 0 |==> false
921:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toProperString():949:toProperString = Integer.toString(getProperWhole()) |==> <NO-OP>
922:LVR:POS:0:org.apache.commons.lang3.math.Fraction@toProperString():951:32 |==> 0
923:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@toProperString():951:32 |==> -32
924:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toProperString():951:toProperString = new StringBuilder(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString() |==> <NO-OP>
925:LVR:POS:0:org.apache.commons.lang3.math.Fraction@toProperString():957:32 |==> 0
926:LVR:POS:NEG:org.apache.commons.lang3.math.Fraction@toProperString():957:32 |==> -32
927:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang3.math.Fraction@toProperString():957:toProperString = new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString() |==> <NO-OP>
