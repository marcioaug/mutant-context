1:LVR:FALSE:TRUE:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int):142:false |==> true
2:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):164:str == null |==> false
3:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):167:newLineStr == null |==> false
4:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):168:newLineStr = SystemUtils.LINE_SEPARATOR |==> <NO-OP>
5:LVR:POS:0:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):170:1 |==> 0
6:LVR:POS:NEG:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):170:1 |==> -1
7:ROR:<(int,int):!=(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):170:wrapLength < 1 |==> wrapLength != 1
8:ROR:<(int,int):<=(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):170:wrapLength < 1 |==> wrapLength <= 1
9:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):170:wrapLength < 1 |==> false
10:LVR:POS:0:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):171:1 |==> 0
11:LVR:POS:NEG:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):171:1 |==> -1
12:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):171:wrapLength = 1 |==> <NO-OP>
13:LVR:0:POS:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):174:0 |==> 1
14:LVR:0:NEG:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):174:0 |==> -1
15:LVR:POS:0:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):175:32 |==> 0
16:LVR:POS:NEG:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):175:32 |==> -32
17:AOR:+(int,int):%(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):175:inputLineLength + 32 |==> inputLineLength % 32
18:AOR:+(int,int):*(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):175:inputLineLength + 32 |==> inputLineLength * 32
19:AOR:+(int,int):-(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):175:inputLineLength + 32 |==> inputLineLength - 32
20:AOR:+(int,int):/(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):175:inputLineLength + 32 |==> inputLineLength / 32
21:AOR:-(int,int):%(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):177:inputLineLength - offset |==> inputLineLength % offset
22:AOR:-(int,int):*(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):177:inputLineLength - offset |==> inputLineLength * offset
23:AOR:-(int,int):+(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):177:inputLineLength - offset |==> inputLineLength + offset
24:AOR:-(int,int):/(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):177:inputLineLength - offset |==> inputLineLength / offset
25:ROR:>(int,int):!=(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):177:(inputLineLength - offset) > wrapLength |==> (inputLineLength - offset) != wrapLength
26:ROR:>(int,int):>=(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):177:(inputLineLength - offset) > wrapLength |==> (inputLineLength - offset) >= wrapLength
27:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):177:(inputLineLength - offset) > wrapLength |==> false
28:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):178:str.charAt(offset) == ' ' |==> str.charAt(offset) <= ' '
29:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):178:str.charAt(offset) == ' ' |==> str.charAt(offset) >= ' '
30:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):178:str.charAt(offset) == ' ' |==> false
31:STD:<INC>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):179:offset++ |==> <NO-OP>
32:AOR:+(int,int):%(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):182:wrapLength + offset |==> wrapLength % offset
33:AOR:+(int,int):*(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):182:wrapLength + offset |==> wrapLength * offset
34:AOR:+(int,int):-(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):182:wrapLength + offset |==> wrapLength - offset
35:AOR:+(int,int):/(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):182:wrapLength + offset |==> wrapLength / offset
36:ROR:>=(int,int):==(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):184:spaceToWrapAt >= offset |==> spaceToWrapAt == offset
37:ROR:>=(int,int):>(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):184:spaceToWrapAt >= offset |==> spaceToWrapAt > offset
38:ROR:>=(int,int):TRUE(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):184:spaceToWrapAt >= offset |==> true
39:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):186:wrappedLine.append(str.substring(offset, spaceToWrapAt)) |==> <NO-OP>
40:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):187:wrappedLine.append(newLineStr) |==> <NO-OP>
41:LVR:POS:0:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):188:1 |==> 0
42:LVR:POS:NEG:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):188:1 |==> -1
43:AOR:+(int,int):%(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):188:spaceToWrapAt + 1 |==> spaceToWrapAt % 1
44:AOR:+(int,int):*(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):188:spaceToWrapAt + 1 |==> spaceToWrapAt * 1
45:AOR:+(int,int):-(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):188:spaceToWrapAt + 1 |==> spaceToWrapAt - 1
46:AOR:+(int,int):/(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):188:spaceToWrapAt + 1 |==> spaceToWrapAt / 1
47:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):188:offset = spaceToWrapAt + 1 |==> <NO-OP>
48:COR:wrapLongWords:TRUE:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):192:wrapLongWords |==> false
49:COR:wrapLongWords:FALSE:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):192:wrapLongWords |==> true
50:AOR:+(int,int):%(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):194:wrapLength + offset |==> wrapLength % offset
51:AOR:+(int,int):*(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):194:wrapLength + offset |==> wrapLength * offset
52:AOR:+(int,int):-(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):194:wrapLength + offset |==> wrapLength - offset
53:AOR:+(int,int):/(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):194:wrapLength + offset |==> wrapLength / offset
54:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):194:wrappedLine.append(str.substring(offset, wrapLength + offset)) |==> <NO-OP>
55:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):195:wrappedLine.append(newLineStr) |==> <NO-OP>
56:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):196:offset += wrapLength |==> <NO-OP>
57:AOR:+(int,int):%(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):199:wrapLength + offset |==> wrapLength % offset
58:AOR:+(int,int):*(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):199:wrapLength + offset |==> wrapLength * offset
59:AOR:+(int,int):-(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):199:wrapLength + offset |==> wrapLength - offset
60:AOR:+(int,int):/(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):199:wrapLength + offset |==> wrapLength / offset
61:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):199:spaceToWrapAt = str.indexOf(' ', wrapLength + offset) |==> <NO-OP>
62:LVR:0:POS:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):200:0 |==> 1
63:LVR:0:NEG:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):200:0 |==> -1
64:ROR:>=(int,int):==(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):200:spaceToWrapAt >= 0 |==> spaceToWrapAt == 0
65:ROR:>=(int,int):>(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):200:spaceToWrapAt >= 0 |==> spaceToWrapAt > 0
66:ROR:>=(int,int):TRUE(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):200:spaceToWrapAt >= 0 |==> true
67:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):201:wrappedLine.append(str.substring(offset, spaceToWrapAt)) |==> <NO-OP>
68:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):202:wrappedLine.append(newLineStr) |==> <NO-OP>
69:LVR:POS:0:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):203:1 |==> 0
70:LVR:POS:NEG:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):203:1 |==> -1
71:AOR:+(int,int):%(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):203:spaceToWrapAt + 1 |==> spaceToWrapAt % 1
72:AOR:+(int,int):*(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):203:spaceToWrapAt + 1 |==> spaceToWrapAt * 1
73:AOR:+(int,int):-(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):203:spaceToWrapAt + 1 |==> spaceToWrapAt - 1
74:AOR:+(int,int):/(int,int):org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):203:spaceToWrapAt + 1 |==> spaceToWrapAt / 1
75:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):203:offset = spaceToWrapAt + 1 |==> <NO-OP>
76:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):205:wrappedLine.append(str.substring(offset)) |==> <NO-OP>
77:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):206:offset = inputLineLength |==> <NO-OP>
78:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@wrap(java.lang.String,int,java.lang.String,boolean):213:wrappedLine.append(str.substring(offset)) |==> <NO-OP>
79:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):276:delimiters == null |==> false
80:LVR:NEG:0:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):276:-1 |==> 0
81:LVR:NEG:POS:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):276:-1 |==> 1
82:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:str == null |==> false
83:LVR:0:POS:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:0 |==> 1
84:LVR:0:NEG:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:0 |==> -1
85:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:str.length() == 0 |==> str.length() <= 0
86:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:str.length() == 0 |==> str.length() >= 0
87:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:str.length() == 0 |==> false
88:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:str == null || str.length() == 0 |==> str == null != (str.length() == 0)
89:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:str == null || str.length() == 0 |==> str == null
90:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:str == null || str.length() == 0 |==> str.length() == 0
91:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:str == null || str.length() == 0 |==> true
92:LVR:0:POS:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:0 |==> 1
93:LVR:0:NEG:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:0 |==> -1
94:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:delimLen == 0 |==> delimLen <= 0
95:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:delimLen == 0 |==> delimLen >= 0
96:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:delimLen == 0 |==> false
97:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:str == null || str.length() == 0 || delimLen == 0 |==> (str == null || str.length() == 0) != (delimLen == 0)
98:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:str == null || str.length() == 0 || delimLen == 0 |==> str == null || str.length() == 0
99:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:str == null || str.length() == 0 || delimLen == 0 |==> delimLen == 0
100:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):277:str == null || str.length() == 0 || delimLen == 0 |==> true
101:LVR:TRUE:FALSE:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):282:true |==> false
102:LVR:0:POS:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):283:0 |==> 1
103:LVR:0:NEG:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):283:0 |==> -1
104:ROR:<(int,int):!=(int,int):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):283:i < strLen |==> i != strLen
105:ROR:<(int,int):<=(int,int):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):283:i < strLen |==> i <= strLen
106:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):283:i < strLen |==> false
107:COR:isDelimiter(ch, delimiters):TRUE:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):286:isDelimiter(ch, delimiters) |==> false
108:COR:isDelimiter(ch, delimiters):FALSE:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):286:isDelimiter(ch, delimiters) |==> true
109:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):287:buffer.append(ch) |==> <NO-OP>
110:LVR:TRUE:FALSE:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):288:true |==> false
111:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):288:capitalizeNext = true |==> <NO-OP>
112:COR:capitalizeNext:TRUE:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):289:capitalizeNext |==> false
113:COR:capitalizeNext:FALSE:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):289:capitalizeNext |==> true
114:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):290:buffer.append(Character.toTitleCase(ch)) |==> <NO-OP>
115:LVR:FALSE:TRUE:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):291:false |==> true
116:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):291:capitalizeNext = false |==> <NO-OP>
117:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@capitalize(java.lang.String,char[]):293:buffer.append(ch) |==> <NO-OP>
118:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):350:delimiters == null |==> false
119:LVR:NEG:0:org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):350:-1 |==> 0
120:LVR:NEG:POS:org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):350:-1 |==> 1
121:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:str == null |==> false
122:LVR:0:POS:org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:0 |==> 1
123:LVR:0:NEG:org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:0 |==> -1
124:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:str.length() == 0 |==> str.length() <= 0
125:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:str.length() == 0 |==> str.length() >= 0
126:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:str.length() == 0 |==> false
127:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:str == null || str.length() == 0 |==> str == null != (str.length() == 0)
128:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:str == null || str.length() == 0 |==> str == null
129:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:str == null || str.length() == 0 |==> str.length() == 0
130:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:str == null || str.length() == 0 |==> true
131:LVR:0:POS:org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:0 |==> 1
132:LVR:0:NEG:org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:0 |==> -1
133:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:delimLen == 0 |==> delimLen <= 0
134:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:delimLen == 0 |==> delimLen >= 0
135:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:delimLen == 0 |==> false
136:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:str == null || str.length() == 0 || delimLen == 0 |==> (str == null || str.length() == 0) != (delimLen == 0)
137:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:str == null || str.length() == 0 || delimLen == 0 |==> str == null || str.length() == 0
138:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:str == null || str.length() == 0 || delimLen == 0 |==> delimLen == 0
139:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):351:str == null || str.length() == 0 || delimLen == 0 |==> true
140:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@capitalizeFully(java.lang.String,char[]):354:str = str.toLowerCase() |==> <NO-OP>
141:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):406:delimiters == null |==> false
142:LVR:NEG:0:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):406:-1 |==> 0
143:LVR:NEG:POS:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):406:-1 |==> 1
144:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:str == null |==> false
145:LVR:0:POS:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:0 |==> 1
146:LVR:0:NEG:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:0 |==> -1
147:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:str.length() == 0 |==> str.length() <= 0
148:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:str.length() == 0 |==> str.length() >= 0
149:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:str.length() == 0 |==> false
150:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:str == null || str.length() == 0 |==> str == null != (str.length() == 0)
151:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:str == null || str.length() == 0 |==> str == null
152:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:str == null || str.length() == 0 |==> str.length() == 0
153:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:str == null || str.length() == 0 |==> true
154:LVR:0:POS:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:0 |==> 1
155:LVR:0:NEG:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:0 |==> -1
156:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:delimLen == 0 |==> delimLen <= 0
157:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:delimLen == 0 |==> delimLen >= 0
158:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:delimLen == 0 |==> false
159:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:str == null || str.length() == 0 || delimLen == 0 |==> (str == null || str.length() == 0) != (delimLen == 0)
160:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:str == null || str.length() == 0 || delimLen == 0 |==> str == null || str.length() == 0
161:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:str == null || str.length() == 0 || delimLen == 0 |==> delimLen == 0
162:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):407:str == null || str.length() == 0 || delimLen == 0 |==> true
163:LVR:TRUE:FALSE:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):412:true |==> false
164:LVR:0:POS:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):413:0 |==> 1
165:LVR:0:NEG:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):413:0 |==> -1
166:ROR:<(int,int):!=(int,int):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):413:i < strLen |==> i != strLen
167:ROR:<(int,int):<=(int,int):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):413:i < strLen |==> i <= strLen
168:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):413:i < strLen |==> false
169:COR:isDelimiter(ch, delimiters):TRUE:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):416:isDelimiter(ch, delimiters) |==> false
170:COR:isDelimiter(ch, delimiters):FALSE:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):416:isDelimiter(ch, delimiters) |==> true
171:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):417:buffer.append(ch) |==> <NO-OP>
172:LVR:TRUE:FALSE:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):418:true |==> false
173:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):418:uncapitalizeNext = true |==> <NO-OP>
174:COR:uncapitalizeNext:TRUE:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):419:uncapitalizeNext |==> false
175:COR:uncapitalizeNext:FALSE:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):419:uncapitalizeNext |==> true
176:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):420:buffer.append(Character.toLowerCase(ch)) |==> <NO-OP>
177:LVR:FALSE:TRUE:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):421:false |==> true
178:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):421:uncapitalizeNext = false |==> <NO-OP>
179:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@uncapitalize(java.lang.String,char[]):423:buffer.append(ch) |==> <NO-OP>
180:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@swapCase(java.lang.String):454:str == null |==> false
181:LVR:0:POS:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):454:0 |==> 1
182:LVR:0:NEG:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):454:0 |==> -1
183:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@swapCase(java.lang.String):454:(strLen = str.length()) == 0 |==> (strLen = str.length()) <= 0
184:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@swapCase(java.lang.String):454:(strLen = str.length()) == 0 |==> (strLen = str.length()) >= 0
185:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.WordUtils@swapCase(java.lang.String):454:str == null || (strLen = str.length()) == 0 |==> str == null != ((strLen = str.length()) == 0)
186:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.WordUtils@swapCase(java.lang.String):454:str == null || (strLen = str.length()) == 0 |==> (strLen = str.length()) == 0
187:LVR:TRUE:FALSE:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):459:true |==> false
188:LVR:0:POS:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):460:0 |==> 1
189:LVR:0:NEG:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):460:0 |==> -1
190:LVR:0:POS:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):461:0 |==> 1
191:LVR:0:NEG:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):461:0 |==> -1
192:LVR:0:POS:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):463:0 |==> 1
193:LVR:0:NEG:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):463:0 |==> -1
194:ROR:<(int,int):!=(int,int):org.apache.commons.lang.WordUtils@swapCase(java.lang.String):463:i < strLen |==> i != strLen
195:ROR:<(int,int):<=(int,int):org.apache.commons.lang.WordUtils@swapCase(java.lang.String):463:i < strLen |==> i <= strLen
196:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@swapCase(java.lang.String):463:i < strLen |==> false
197:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):464:ch = str.charAt(i) |==> <NO-OP>
198:COR:Character.isUpperCase(ch):TRUE:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):465:Character.isUpperCase(ch) |==> false
199:COR:Character.isUpperCase(ch):FALSE:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):465:Character.isUpperCase(ch) |==> true
200:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):466:tmp = Character.toLowerCase(ch) |==> <NO-OP>
201:COR:Character.isTitleCase(ch):TRUE:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):467:Character.isTitleCase(ch) |==> false
202:COR:Character.isTitleCase(ch):FALSE:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):467:Character.isTitleCase(ch) |==> true
203:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):468:tmp = Character.toLowerCase(ch) |==> <NO-OP>
204:COR:Character.isLowerCase(ch):TRUE:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):469:Character.isLowerCase(ch) |==> false
205:COR:Character.isLowerCase(ch):FALSE:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):469:Character.isLowerCase(ch) |==> true
206:COR:whitespace:TRUE:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):470:whitespace |==> false
207:COR:whitespace:FALSE:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):470:whitespace |==> true
208:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):471:tmp = Character.toTitleCase(ch) |==> <NO-OP>
209:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):473:tmp = Character.toUpperCase(ch) |==> <NO-OP>
210:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):476:tmp = ch |==> <NO-OP>
211:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):478:buffer.append(tmp) |==> <NO-OP>
212:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@swapCase(java.lang.String):479:whitespace = Character.isWhitespace(ch) |==> <NO-OP>
213:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):539:str == null |==> false
214:LVR:0:POS:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):539:0 |==> 1
215:LVR:0:NEG:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):539:0 |==> -1
216:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):539:str.length() == 0 |==> str.length() <= 0
217:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):539:str.length() == 0 |==> str.length() >= 0
218:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):539:str.length() == 0 |==> false
219:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):539:str == null || str.length() == 0 |==> str == null != (str.length() == 0)
220:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):539:str == null || str.length() == 0 |==> str == null
221:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):539:str == null || str.length() == 0 |==> str.length() == 0
222:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):539:str == null || str.length() == 0 |==> true
223:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):542:delimiters != null |==> true
224:LVR:0:POS:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):542:0 |==> 1
225:LVR:0:NEG:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):542:0 |==> -1
226:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):542:delimiters.length == 0 |==> delimiters.length <= 0
227:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):542:delimiters.length == 0 |==> delimiters.length >= 0
228:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):542:delimiters.length == 0 |==> false
229:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):542:delimiters != null && delimiters.length == 0 |==> delimiters != null == (delimiters.length == 0)
230:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):542:delimiters != null && delimiters.length == 0 |==> false
231:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):542:delimiters != null && delimiters.length == 0 |==> delimiters != null
232:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):542:delimiters != null && delimiters.length == 0 |==> delimiters.length == 0
233:LVR:POS:0:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):546:2 |==> 0
234:LVR:POS:NEG:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):546:2 |==> -2
235:AOR:/(int,int):%(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):546:strLen / 2 |==> strLen % 2
236:AOR:/(int,int):*(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):546:strLen / 2 |==> strLen * 2
237:AOR:/(int,int):+(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):546:strLen / 2 |==> strLen + 2
238:AOR:/(int,int):-(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):546:strLen / 2 |==> strLen - 2
239:LVR:POS:0:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):546:1 |==> 0
240:LVR:POS:NEG:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):546:1 |==> -1
241:AOR:+(int,int):%(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):546:strLen / 2 + 1 |==> strLen / 2 % 1
242:AOR:+(int,int):*(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):546:strLen / 2 + 1 |==> strLen / 2 * 1
243:AOR:+(int,int):-(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):546:strLen / 2 + 1 |==> strLen / 2 - 1
244:AOR:+(int,int):/(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):546:strLen / 2 + 1 |==> strLen / 2 / 1
245:LVR:0:POS:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):547:0 |==> 1
246:LVR:0:NEG:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):547:0 |==> -1
247:LVR:TRUE:FALSE:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):548:true |==> false
248:LVR:0:POS:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):549:0 |==> 1
249:LVR:0:NEG:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):549:0 |==> -1
250:ROR:<(int,int):!=(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):549:i < strLen |==> i != strLen
251:ROR:<(int,int):<=(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):549:i < strLen |==> i <= strLen
252:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):549:i < strLen |==> false
253:COR:isDelimiter(ch, delimiters):TRUE:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):552:isDelimiter(ch, delimiters) |==> false
254:COR:isDelimiter(ch, delimiters):FALSE:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):552:isDelimiter(ch, delimiters) |==> true
255:LVR:TRUE:FALSE:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):553:true |==> false
256:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):553:lastWasGap = true |==> <NO-OP>
257:COR:lastWasGap:TRUE:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):554:lastWasGap |==> false
258:COR:lastWasGap:FALSE:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):554:lastWasGap |==> true
259:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):555:buf[count++] = ch |==> <NO-OP>
260:LVR:FALSE:TRUE:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):556:false |==> true
261:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):556:lastWasGap = false |==> <NO-OP>
262:LVR:0:POS:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):561:0 |==> 1
263:LVR:0:NEG:org.apache.commons.lang.WordUtils@initials(java.lang.String,char[]):561:0 |==> -1
264:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@isDelimiter(char,char[]):573:delimiters == null |==> false
265:LVR:0:POS:org.apache.commons.lang.WordUtils@isDelimiter(char,char[]):576:0 |==> 1
266:LVR:0:NEG:org.apache.commons.lang.WordUtils@isDelimiter(char,char[]):576:0 |==> -1
267:ROR:<(int,int):!=(int,int):org.apache.commons.lang.WordUtils@isDelimiter(char,char[]):576:i < isize |==> i != isize
268:ROR:<(int,int):<=(int,int):org.apache.commons.lang.WordUtils@isDelimiter(char,char[]):576:i < isize |==> i <= isize
269:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@isDelimiter(char,char[]):576:i < isize |==> false
270:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@isDelimiter(char,char[]):577:ch == delimiters[i] |==> ch <= delimiters[i]
271:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@isDelimiter(char,char[]):577:ch == delimiters[i] |==> ch >= delimiters[i]
272:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@isDelimiter(char,char[]):577:ch == delimiters[i] |==> false
273:LVR:TRUE:FALSE:org.apache.commons.lang.WordUtils@isDelimiter(char,char[]):578:true |==> false
274:LVR:FALSE:TRUE:org.apache.commons.lang.WordUtils@isDelimiter(char,char[]):581:false |==> true
275:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):607:str == null |==> false
276:LVR:0:POS:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):610:0 |==> 1
277:LVR:0:NEG:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):610:0 |==> -1
278:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):610:str.length() == 0 |==> str.length() <= 0
279:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):610:str.length() == 0 |==> str.length() >= 0
280:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):610:str.length() == 0 |==> false
281:ROR:>(int,int):!=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):616:lower > str.length() |==> lower != str.length()
282:ROR:>(int,int):>=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):616:lower > str.length() |==> lower >= str.length()
283:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):616:lower > str.length() |==> false
284:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):617:lower = str.length() |==> <NO-OP>
285:LVR:NEG:0:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):621:-1 |==> 0
286:LVR:NEG:POS:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):621:-1 |==> 1
287:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):621:upper == -1 |==> upper <= -1
288:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):621:upper == -1 |==> upper >= -1
289:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):621:upper == -1 |==> false
290:ROR:>(int,int):!=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):621:upper > str.length() |==> upper != str.length()
291:ROR:>(int,int):>=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):621:upper > str.length() |==> upper >= str.length()
292:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):621:upper > str.length() |==> false
293:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):621:upper == -1 || upper > str.length() |==> upper == -1 != upper > str.length()
294:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):621:upper == -1 || upper > str.length() |==> upper == -1
295:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):621:upper == -1 || upper > str.length() |==> upper > str.length()
296:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):621:upper == -1 || upper > str.length() |==> true
297:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):622:upper = str.length() |==> <NO-OP>
298:ROR:<(int,int):!=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):625:upper < lower |==> upper != lower
299:ROR:<(int,int):<=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):625:upper < lower |==> upper <= lower
300:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):625:upper < lower |==> false
301:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):626:upper = lower |==> <NO-OP>
302:LVR:NEG:0:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):631:-1 |==> 0
303:LVR:NEG:POS:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):631:-1 |==> 1
304:ROR:==(int,int):<=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):631:index == -1 |==> index <= -1
305:ROR:==(int,int):>=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):631:index == -1 |==> index >= -1
306:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):631:index == -1 |==> false
307:LVR:0:POS:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):632:0 |==> 1
308:LVR:0:NEG:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):632:0 |==> -1
309:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):632:result.append(str.substring(0, upper)) |==> <NO-OP>
310:ROR:!=(int,int):<(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):634:upper != str.length() |==> upper < str.length()
311:ROR:!=(int,int):>(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):634:upper != str.length() |==> upper > str.length()
312:ROR:!=(int,int):TRUE(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):634:upper != str.length() |==> true
313:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):635:result.append(StringUtils.defaultString(appendToEnd)) |==> <NO-OP>
314:ROR:>(int,int):!=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):637:index > upper |==> index != upper
315:ROR:>(int,int):>=(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):637:index > upper |==> index >= upper
316:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):637:index > upper |==> false
317:LVR:0:POS:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):638:0 |==> 1
318:LVR:0:NEG:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):638:0 |==> -1
319:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):638:result.append(str.substring(0, upper)) |==> <NO-OP>
320:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):639:result.append(StringUtils.defaultString(appendToEnd)) |==> <NO-OP>
321:LVR:0:POS:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):641:0 |==> 1
322:LVR:0:NEG:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):641:0 |==> -1
323:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):641:result.append(str.substring(0, index)) |==> <NO-OP>
324:STD:<CALL>:<NO-OP>:org.apache.commons.lang.WordUtils@abbreviate(java.lang.String,int,int,java.lang.String):642:result.append(StringUtils.defaultString(appendToEnd)) |==> <NO-OP>
