1:STD:<CALL>:<NO-OP>:org.apache.commons.math3.geometry.euclidean.threed.SubLine@getSegments():89:segments.add(new Segment(start, end, line)) |==> <NO-OP>
2:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):114:v1D == null |==> false
3:COR:includeEndPoints:TRUE:org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):124:includeEndPoints |==> false
4:COR:includeEndPoints:FALSE:org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):124:includeEndPoints |==> true
5:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:loc1 != Location.OUTSIDE |==> true
6:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:loc2 != Location.OUTSIDE |==> true
7:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE) == (loc2 != Location.OUTSIDE)
8:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> false
9:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE)
10:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):125:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc2 != Location.OUTSIDE)
11:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:loc1 == Location.INSIDE |==> false
12:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:loc2 == Location.INSIDE |==> false
13:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE) == (loc2 == Location.INSIDE)
14:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> false
15:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE)
16:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.threed.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine,boolean):127:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc2 == Location.INSIDE)
17:STD:<CALL>:<NO-OP>:org.apache.commons.math3.geometry.euclidean.twod.SubLine@getSegments():89:segments.add(new Segment(start, end, line)) |==> <NO-OP>
18:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):118:v2D == null |==> false
19:COR:includeEndPoints:TRUE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):128:includeEndPoints |==> false
20:COR:includeEndPoints:FALSE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):128:includeEndPoints |==> true
21:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:loc1 != Location.OUTSIDE |==> true
22:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:loc2 != Location.OUTSIDE |==> true
23:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE) == (loc2 != Location.OUTSIDE)
24:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> false
25:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc1 != Location.OUTSIDE)
26:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):129:(loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE) |==> (loc2 != Location.OUTSIDE)
27:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:loc1 == Location.INSIDE |==> false
28:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:loc2 == Location.INSIDE |==> false
29:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE) == (loc2 == Location.INSIDE)
30:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> false
31:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc1 == Location.INSIDE)
32:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.math3.geometry.euclidean.twod.SubLine@intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean):131:(loc1 == Location.INSIDE) && (loc2 == Location.INSIDE) |==> (loc2 == Location.INSIDE)
33:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):162:crossing == null |==> false
34:ORU:-(double):+(double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:-1.0E-10 |==> +1.0E-10
35:LVR:POS:0:org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:1.0E-10 |==> 0.0
36:LVR:POS:NEG:org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:1.0E-10 |==> -1.0E-10
37:ROR:<(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global < -1.0E-10 |==> global != -1.0E-10
38:ROR:<(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global < -1.0E-10 |==> global <= -1.0E-10
39:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global < -1.0E-10 |==> false
40:LVR:POS:0:org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:1.0E-10 |==> 0.0
41:LVR:POS:NEG:org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:1.0E-10 |==> -1.0E-10
42:ROR:>(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global > 1.0E-10 |==> global != 1.0E-10
43:ROR:>(double,double):>=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global > 1.0E-10 |==> global >= 1.0E-10
44:ROR:>(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):165:global > 1.0E-10 |==> false
45:AOR:-(double,double):%(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() % otherLine.getAngle()
46:AOR:-(double,double):*(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() * otherLine.getAngle()
47:AOR:-(double,double):+(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() + otherLine.getAngle()
48:AOR:-(double,double):/(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() / otherLine.getAngle()
49:LVR:0:POS:org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:0 |==> 1
50:LVR:0:NEG:org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:0 |==> -1
51:ROR:<(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) != 0
52:ROR:<(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) <= 0
53:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@side(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):169:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> false
54:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):183:crossing == null |==> false
55:ORU:-(double):+(double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:-1.0E-10 |==> +1.0E-10
56:LVR:POS:0:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:1.0E-10 |==> 0.0
57:LVR:POS:NEG:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:1.0E-10 |==> -1.0E-10
58:ROR:<(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:global < -1.0E-10 |==> global != -1.0E-10
59:ROR:<(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:global < -1.0E-10 |==> global <= -1.0E-10
60:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):186:global < -1.0E-10 |==> false
61:AOR:-(double,double):%(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() % otherLine.getAngle()
62:AOR:-(double,double):*(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() * otherLine.getAngle()
63:AOR:-(double,double):+(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() + otherLine.getAngle()
64:AOR:-(double,double):/(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:thisLine.getAngle() - otherLine.getAngle() |==> thisLine.getAngle() / otherLine.getAngle()
65:LVR:0:POS:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:0 |==> 1
66:LVR:0:NEG:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:0 |==> -1
67:ROR:<(double,double):!=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) != 0
68:ROR:<(double,double):<=(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) <= 0
69:ROR:<(double,double):FALSE(double,double):org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):192:FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0 |==> false
70:LVR:FALSE:TRUE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):197:false |==> true
71:COR:getRemainingRegion().isEmpty(splitTree.getPlus()):TRUE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):198:getRemainingRegion().isEmpty(splitTree.getPlus()) |==> false
72:COR:getRemainingRegion().isEmpty(splitTree.getPlus()):FALSE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):198:getRemainingRegion().isEmpty(splitTree.getPlus()) |==> true
73:COR:getRemainingRegion().isEmpty(splitTree.getMinus()):TRUE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):202:getRemainingRegion().isEmpty(splitTree.getMinus()) |==> false
74:COR:getRemainingRegion().isEmpty(splitTree.getMinus()):FALSE:org.apache.commons.math3.geometry.euclidean.twod.SubLine@split(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>):202:getRemainingRegion().isEmpty(splitTree.getMinus()) |==> true
