1:LVR:0:POS:org.apache.commons.lang.math.Fraction:48:0 |==> 1
2:LVR:0:NEG:org.apache.commons.lang.math.Fraction:48:0 |==> -1
3:LVR:POS:0:org.apache.commons.lang.math.Fraction:48:1 |==> 0
4:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:48:1 |==> -1
5:LVR:POS:0:org.apache.commons.lang.math.Fraction:52:1 |==> 0
6:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:52:1 |==> -1
7:LVR:POS:0:org.apache.commons.lang.math.Fraction:52:1 |==> 0
8:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:52:1 |==> -1
9:LVR:POS:0:org.apache.commons.lang.math.Fraction:56:1 |==> 0
10:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:56:1 |==> -1
11:LVR:POS:0:org.apache.commons.lang.math.Fraction:56:2 |==> 0
12:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:56:2 |==> -2
13:LVR:POS:0:org.apache.commons.lang.math.Fraction:60:1 |==> 0
14:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:60:1 |==> -1
15:LVR:POS:0:org.apache.commons.lang.math.Fraction:60:3 |==> 0
16:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:60:3 |==> -3
17:LVR:POS:0:org.apache.commons.lang.math.Fraction:64:2 |==> 0
18:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:64:2 |==> -2
19:LVR:POS:0:org.apache.commons.lang.math.Fraction:64:3 |==> 0
20:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:64:3 |==> -3
21:LVR:POS:0:org.apache.commons.lang.math.Fraction:68:1 |==> 0
22:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:68:1 |==> -1
23:LVR:POS:0:org.apache.commons.lang.math.Fraction:68:4 |==> 0
24:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:68:4 |==> -4
25:LVR:POS:0:org.apache.commons.lang.math.Fraction:72:2 |==> 0
26:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:72:2 |==> -2
27:LVR:POS:0:org.apache.commons.lang.math.Fraction:72:4 |==> 0
28:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:72:4 |==> -4
29:LVR:POS:0:org.apache.commons.lang.math.Fraction:76:3 |==> 0
30:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:76:3 |==> -3
31:LVR:POS:0:org.apache.commons.lang.math.Fraction:76:4 |==> 0
32:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:76:4 |==> -4
33:LVR:POS:0:org.apache.commons.lang.math.Fraction:80:1 |==> 0
34:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:80:1 |==> -1
35:LVR:POS:0:org.apache.commons.lang.math.Fraction:80:5 |==> 0
36:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:80:5 |==> -5
37:LVR:POS:0:org.apache.commons.lang.math.Fraction:84:2 |==> 0
38:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:84:2 |==> -2
39:LVR:POS:0:org.apache.commons.lang.math.Fraction:84:5 |==> 0
40:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:84:5 |==> -5
41:LVR:POS:0:org.apache.commons.lang.math.Fraction:88:3 |==> 0
42:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:88:3 |==> -3
43:LVR:POS:0:org.apache.commons.lang.math.Fraction:88:5 |==> 0
44:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:88:5 |==> -5
45:LVR:POS:0:org.apache.commons.lang.math.Fraction:92:4 |==> 0
46:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:92:4 |==> -4
47:LVR:POS:0:org.apache.commons.lang.math.Fraction:92:5 |==> 0
48:LVR:POS:NEG:org.apache.commons.lang.math.Fraction:92:5 |==> -5
49:LVR:0:POS:org.apache.commons.lang.math.Fraction:107:0 |==> 1
50:LVR:0:NEG:org.apache.commons.lang.math.Fraction:107:0 |==> -1
51:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(int,int):142:0 |==> 1
52:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(int,int):142:0 |==> -1
53:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):142:denominator == 0 |==> denominator <= 0
54:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):142:denominator == 0 |==> denominator >= 0
55:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):142:denominator == 0 |==> false
56:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(int,int):145:0 |==> 1
57:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(int,int):145:0 |==> -1
58:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):145:denominator < 0 |==> denominator != 0
59:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):145:denominator < 0 |==> denominator <= 0
60:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):145:denominator < 0 |==> false
61:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
62:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
63:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE |==> false
64:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):147:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
65:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):147:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
66:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int):147:denominator == Integer.MIN_VALUE |==> false
67:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE != (denominator == Integer.MIN_VALUE)
68:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE
69:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int):147:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> denominator == Integer.MIN_VALUE
70:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int):146:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> true
71:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@getFraction(int,int):150:-numerator |==> +numerator
72:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@getFraction(int,int):150:-numerator |==> ~numerator
73:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(int,int):150:numerator = -numerator |==> <NO-OP>
74:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@getFraction(int,int):151:-denominator |==> +denominator
75:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@getFraction(int,int):151:-denominator |==> ~denominator
76:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(int,int):151:denominator = -denominator |==> <NO-OP>
77:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:0 |==> 1
78:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:0 |==> -1
79:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:denominator == 0 |==> denominator <= 0
80:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:denominator == 0 |==> denominator >= 0
81:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):173:denominator == 0 |==> false
82:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:0 |==> 1
83:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:0 |==> -1
84:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:denominator < 0 |==> denominator != 0
85:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:denominator < 0 |==> denominator <= 0
86:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):176:denominator < 0 |==> false
87:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:0 |==> 1
88:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:0 |==> -1
89:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:numerator < 0 |==> numerator != 0
90:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:numerator < 0 |==> numerator <= 0
91:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):179:numerator < 0 |==> false
92:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:0 |==> 1
93:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:0 |==> -1
94:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:whole < 0 |==> whole != 0
95:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:whole < 0 |==> whole <= 0
96:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):183:whole < 0 |==> false
97:AOR:*(long,long):%(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator |==> whole % (long)denominator
98:AOR:*(long,long):+(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator |==> whole + (long)denominator
99:AOR:*(long,long):-(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator |==> whole - (long)denominator
100:AOR:*(long,long):/(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator |==> whole / (long)denominator
101:AOR:-(long,long):%(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator - numerator |==> whole * (long)denominator % numerator
102:AOR:-(long,long):*(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator - numerator |==> whole * (long)denominator * numerator
103:AOR:-(long,long):+(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator - numerator |==> whole * (long)denominator + numerator
104:AOR:-(long,long):/(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):184:whole * (long)denominator - numerator |==> whole * (long)denominator / numerator
105:AOR:*(long,long):%(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator |==> whole % (long)denominator
106:AOR:*(long,long):+(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator |==> whole + (long)denominator
107:AOR:*(long,long):-(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator |==> whole - (long)denominator
108:AOR:*(long,long):/(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator |==> whole / (long)denominator
109:AOR:+(long,long):%(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator + numerator |==> whole * (long)denominator % numerator
110:AOR:+(long,long):*(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator + numerator |==> whole * (long)denominator * numerator
111:AOR:+(long,long):-(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator + numerator |==> whole * (long)denominator - numerator
112:AOR:+(long,long):/(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):186:whole * (long)denominator + numerator |==> whole * (long)denominator / numerator
113:ROR:<(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE |==> numeratorValue != Integer.MIN_VALUE
114:ROR:<(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE |==> numeratorValue <= Integer.MIN_VALUE
115:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE |==> false
116:ROR:>(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):189:numeratorValue > Integer.MAX_VALUE |==> numeratorValue != Integer.MAX_VALUE
117:ROR:>(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):189:numeratorValue > Integer.MAX_VALUE |==> numeratorValue >= Integer.MAX_VALUE
118:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):189:numeratorValue > Integer.MAX_VALUE |==> false
119:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MIN_VALUE != numeratorValue > Integer.MAX_VALUE
120:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue < Integer.MIN_VALUE
121:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):189:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> numeratorValue > Integer.MAX_VALUE
122:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(int,int,int):188:numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE |==> true
123:LVR:0:POS:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:0 |==> 1
124:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:0 |==> -1
125:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:denominator == 0 |==> denominator <= 0
126:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:denominator == 0 |==> denominator >= 0
127:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):210:denominator == 0 |==> false
128:LVR:0:POS:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:0 |==> 1
129:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:0 |==> -1
130:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:numerator == 0 |==> numerator <= 0
131:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:numerator == 0 |==> numerator >= 0
132:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):213:numerator == 0 |==> false
133:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
134:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
135:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE |==> false
136:LVR:POS:0:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:1 |==> 0
137:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:1 |==> -1
138:LOR:&(int,int):^(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:numerator & 1 |==> numerator ^ 1
139:LOR:&(int,int):|(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:numerator & 1 |==> numerator | 1
140:LVR:0:POS:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:0 |==> 1
141:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:0 |==> -1
142:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:(numerator & 1) == 0 |==> (numerator & 1) <= 0
143:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:(numerator & 1) == 0 |==> (numerator & 1) >= 0
144:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:(numerator & 1) == 0 |==> false
145:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE == ((numerator & 1) == 0)
146:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> false
147:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> denominator == Integer.MIN_VALUE
148:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):217:denominator == Integer.MIN_VALUE && (numerator & 1) == 0 |==> (numerator & 1) == 0
149:LVR:POS:0:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):218:2 |==> 0
150:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):218:2 |==> -2
151:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):218:numerator /= 2 |==> <NO-OP>
152:LVR:POS:0:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):218:2 |==> 0
153:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):218:2 |==> -2
154:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):218:denominator /= 2 |==> <NO-OP>
155:LVR:0:POS:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:0 |==> 1
156:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:0 |==> -1
157:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:denominator < 0 |==> denominator != 0
158:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:denominator < 0 |==> denominator <= 0
159:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):220:denominator < 0 |==> false
160:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
161:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
162:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE |==> false
163:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator <= Integer.MIN_VALUE
164:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> denominator >= Integer.MIN_VALUE
165:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):222:denominator == Integer.MIN_VALUE |==> false
166:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE != (denominator == Integer.MIN_VALUE)
167:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> numerator == Integer.MIN_VALUE
168:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):222:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> denominator == Integer.MIN_VALUE
169:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):221:numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE |==> true
170:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):225:-numerator |==> +numerator
171:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):225:-numerator |==> ~numerator
172:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):225:numerator = -numerator |==> <NO-OP>
173:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):226:-denominator |==> +denominator
174:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):226:-denominator |==> ~denominator
175:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):226:denominator = -denominator |==> <NO-OP>
176:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):230:numerator /= gcd |==> <NO-OP>
177:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getReducedFraction(int,int):231:denominator /= gcd |==> <NO-OP>
178:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):250:0 |==> 1
179:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):250:0 |==> -1
180:ROR:<(double,double):!=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):250:value < 0 |==> value != 0
181:ROR:<(double,double):<=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):250:value < 0 |==> value <= 0
182:ROR:<(double,double):FALSE(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):250:value < 0 |==> false
183:LVR:NEG:0:org.apache.commons.lang.math.Fraction@getFraction(double):250:-1 |==> 0
184:LVR:NEG:POS:org.apache.commons.lang.math.Fraction@getFraction(double):250:-1 |==> 1
185:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):250:1 |==> 0
186:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):250:1 |==> -1
187:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):251:value = Math.abs(value) |==> <NO-OP>
188:ROR:>(double,double):!=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE |==> value != Integer.MAX_VALUE
189:ROR:>(double,double):>=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE |==> value >= Integer.MAX_VALUE
190:ROR:>(double,double):FALSE(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE |==> false
191:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE || Double.isNaN(value) |==> value > Integer.MAX_VALUE != Double.isNaN(value)
192:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE || Double.isNaN(value) |==> value > Integer.MAX_VALUE
193:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE || Double.isNaN(value) |==> Double.isNaN(value)
194:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):252:value > Integer.MAX_VALUE || Double.isNaN(value) |==> true
195:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):257:value -= wholeNumber |==> <NO-OP>
196:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):259:0 |==> 1
197:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):259:0 |==> -1
198:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):260:1 |==> 0
199:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):260:1 |==> -1
200:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):261:1 |==> 0
201:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):261:1 |==> -1
202:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):262:0 |==> 1
203:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):262:0 |==> -1
204:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):263:0 |==> 1
205:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):263:0 |==> -1
206:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):264:0 |==> 1
207:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):264:0 |==> -1
208:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):266:0 |==> 1
209:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):266:0 |==> -1
210:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):267:1 |==> 0
211:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):267:1 |==> -1
212:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):268:0 |==> 1
213:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):268:0 |==> -1
214:AOR:-(double,double):%(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):269:value - a1 |==> value % a1
215:AOR:-(double,double):*(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):269:value - a1 |==> value * a1
216:AOR:-(double,double):+(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):269:value - a1 |==> value + a1
217:AOR:-(double,double):/(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):269:value - a1 |==> value / a1
218:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):270:0 |==> 1
219:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):270:0 |==> -1
220:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):273:1 |==> 0
221:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):273:1 |==> -1
222:AOR:/(double,double):%(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):277:x1 / y1 |==> x1 % y1
223:AOR:/(double,double):*(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):277:x1 / y1 |==> x1 * y1
224:AOR:/(double,double):+(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):277:x1 / y1 |==> x1 + y1
225:AOR:/(double,double):-(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):277:x1 / y1 |==> x1 - y1
226:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):277:a2 = (int)(x1 / y1) |==> <NO-OP>
227:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):278:x2 = y1 |==> <NO-OP>
228:AOR:*(double,double):%(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:a2 * y1 |==> a2 % y1
229:AOR:*(double,double):+(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:a2 * y1 |==> a2 + y1
230:AOR:*(double,double):-(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:a2 * y1 |==> a2 - y1
231:AOR:*(double,double):/(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:a2 * y1 |==> a2 / y1
232:AOR:-(double,double):%(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:x1 - a2 * y1 |==> x1 % (a2 * y1)
233:AOR:-(double,double):*(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:x1 - a2 * y1 |==> x1 * (a2 * y1)
234:AOR:-(double,double):+(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:x1 - a2 * y1 |==> x1 + a2 * y1
235:AOR:-(double,double):/(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):279:x1 - a2 * y1 |==> x1 / (a2 * y1)
236:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):279:y2 = x1 - a2 * y1 |==> <NO-OP>
237:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 |==> a1 % numer1
238:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 |==> a1 + numer1
239:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 |==> a1 - numer1
240:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 |==> a1 / numer1
241:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 + numer0 |==> a1 * numer1 % numer0
242:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 + numer0 |==> a1 * numer1 * numer0
243:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 + numer0 |==> a1 * numer1 - numer0
244:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):280:a1 * numer1 + numer0 |==> a1 * numer1 / numer0
245:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):280:numer2 = a1 * numer1 + numer0 |==> <NO-OP>
246:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 |==> a1 % denom1
247:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 |==> a1 + denom1
248:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 |==> a1 - denom1
249:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 |==> a1 / denom1
250:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 + denom0 |==> a1 * denom1 % denom0
251:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 + denom0 |==> a1 * denom1 * denom0
252:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 + denom0 |==> a1 * denom1 - denom0
253:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):281:a1 * denom1 + denom0 |==> a1 * denom1 / denom0
254:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):281:denom2 = a1 * denom1 + denom0 |==> <NO-OP>
255:AOR:/(double,double):%(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):282:(double)numer2 / (double)denom2 |==> (double)numer2 % (double)denom2
256:AOR:/(double,double):*(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):282:(double)numer2 / (double)denom2 |==> (double)numer2 * (double)denom2
257:AOR:/(double,double):+(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):282:(double)numer2 / (double)denom2 |==> (double)numer2 + (double)denom2
258:AOR:/(double,double):-(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):282:(double)numer2 / (double)denom2 |==> (double)numer2 - (double)denom2
259:AOR:-(double,double):%(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):283:value - fraction |==> value % fraction
260:AOR:-(double,double):*(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):283:value - fraction |==> value * fraction
261:AOR:-(double,double):+(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):283:value - fraction |==> value + fraction
262:AOR:-(double,double):/(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):283:value - fraction |==> value / fraction
263:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):283:delta2 = Math.abs(value - fraction) |==> <NO-OP>
264:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):285:a1 = a2 |==> <NO-OP>
265:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):286:x1 = x2 |==> <NO-OP>
266:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):287:y1 = y2 |==> <NO-OP>
267:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):288:numer0 = numer1 |==> <NO-OP>
268:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):289:denom0 = denom1 |==> <NO-OP>
269:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):290:numer1 = numer2 |==> <NO-OP>
270:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):291:denom1 = denom2 |==> <NO-OP>
271:STD:<INC>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(double):292:i++ |==> <NO-OP>
272:ROR:>(double,double):!=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):294:delta1 > delta2 |==> delta1 != delta2
273:ROR:>(double,double):>=(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):294:delta1 > delta2 |==> delta1 >= delta2
274:ROR:>(double,double):FALSE(double,double):org.apache.commons.lang.math.Fraction@getFraction(double):294:delta1 > delta2 |==> false
275:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):294:10000 |==> 0
276:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):294:10000 |==> -10000
277:ROR:<=(int,int):<(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 <= 10000 |==> denom2 < 10000
278:ROR:<=(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 <= 10000 |==> denom2 == 10000
279:ROR:<=(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 <= 10000 |==> true
280:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) |==> (delta1 > delta2) == (denom2 <= 10000)
281:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) |==> false
282:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) |==> (delta1 > delta2)
283:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) |==> (denom2 <= 10000)
284:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(double):294:0 |==> 1
285:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):294:0 |==> -1
286:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 > 0 |==> denom2 != 0
287:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 > 0 |==> denom2 >= 0
288:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:denom2 > 0 |==> false
289:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> ((delta1 > delta2) && (denom2 <= 10000)) == (denom2 > 0)
290:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> false
291:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> (delta1 > delta2) && (denom2 <= 10000)
292:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) |==> (denom2 > 0)
293:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):294:25 |==> 0
294:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):294:25 |==> -25
295:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:i < 25 |==> i != 25
296:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:i < 25 |==> i <= 25
297:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):294:i < 25 |==> false
298:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> ((delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0)) == (i < 25)
299:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> false
300:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> (delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0)
301:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@getFraction(double):294:(delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25) |==> (i < 25)
302:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(double):295:25 |==> 0
303:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(double):295:25 |==> -25
304:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):295:i == 25 |==> i <= 25
305:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):295:i == 25 |==> i >= 25
306:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):295:i == 25 |==> false
307:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:wholeNumber * denom0 |==> wholeNumber % denom0
308:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:wholeNumber * denom0 |==> wholeNumber + denom0
309:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:wholeNumber * denom0 |==> wholeNumber - denom0
310:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:wholeNumber * denom0 |==> wholeNumber / denom0
311:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:numer0 + wholeNumber * denom0 |==> numer0 % (wholeNumber * denom0)
312:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:numer0 + wholeNumber * denom0 |==> numer0 * (wholeNumber * denom0)
313:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:numer0 + wholeNumber * denom0 |==> numer0 - wholeNumber * denom0
314:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:numer0 + wholeNumber * denom0 |==> numer0 / (wholeNumber * denom0)
315:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) % sign
316:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) + sign
317:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) - sign
318:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(double):298:(numer0 + wholeNumber * denom0) * sign |==> (numer0 + wholeNumber * denom0) / sign
319:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):320:str == null |==> false
320:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:0 |==> 1
321:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:0 |==> -1
322:ROR:>=(int,int):==(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:pos >= 0 |==> pos == 0
323:ROR:>=(int,int):>(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:pos >= 0 |==> pos > 0
324:ROR:>=(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):325:pos >= 0 |==> true
325:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):330:pos = str.indexOf(' ') |==> <NO-OP>
326:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:0 |==> 1
327:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:0 |==> -1
328:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:pos > 0 |==> pos != 0
329:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:pos > 0 |==> pos >= 0
330:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):331:pos > 0 |==> false
331:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):332:0 |==> 1
332:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):332:0 |==> -1
333:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:1 |==> 0
334:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:1 |==> -1
335:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:pos + 1 |==> pos % 1
336:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:pos + 1 |==> pos * 1
337:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:pos + 1 |==> pos - 1
338:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:pos + 1 |==> pos / 1
339:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):333:str = str.substring(pos + 1) |==> <NO-OP>
340:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):334:pos = str.indexOf('/') |==> <NO-OP>
341:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:0 |==> 1
342:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:0 |==> -1
343:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:pos < 0 |==> pos != 0
344:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:pos < 0 |==> pos <= 0
345:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):335:pos < 0 |==> false
346:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):338:0 |==> 1
347:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):338:0 |==> -1
348:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):339:1 |==> 0
349:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):339:1 |==> -1
350:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):339:pos + 1 |==> pos % 1
351:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):339:pos + 1 |==> pos * 1
352:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):339:pos + 1 |==> pos - 1
353:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):339:pos + 1 |==> pos / 1
354:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):345:pos = str.indexOf('/') |==> <NO-OP>
355:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:0 |==> 1
356:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:0 |==> -1
357:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:pos < 0 |==> pos != 0
358:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:pos < 0 |==> pos <= 0
359:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):346:pos < 0 |==> false
360:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):348:1 |==> 0
361:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):348:1 |==> -1
362:LVR:0:POS:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):350:0 |==> 1
363:LVR:0:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):350:0 |==> -1
364:LVR:POS:0:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):351:1 |==> 0
365:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):351:1 |==> -1
366:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):351:pos + 1 |==> pos % 1
367:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):351:pos + 1 |==> pos * 1
368:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):351:pos + 1 |==> pos - 1
369:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getFraction(java.lang.String):351:pos + 1 |==> pos / 1
370:AOR:%(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getProperNumerator():392:numerator % denominator |==> numerator * denominator
371:AOR:%(int,int):+(int,int):org.apache.commons.lang.math.Fraction@getProperNumerator():392:numerator % denominator |==> numerator + denominator
372:AOR:%(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getProperNumerator():392:numerator % denominator |==> numerator - denominator
373:AOR:%(int,int):/(int,int):org.apache.commons.lang.math.Fraction@getProperNumerator():392:numerator % denominator |==> numerator / denominator
374:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@getProperWhole():407:numerator / denominator |==> numerator % denominator
375:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@getProperWhole():407:numerator / denominator |==> numerator * denominator
376:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@getProperWhole():407:numerator / denominator |==> numerator + denominator
377:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@getProperWhole():407:numerator / denominator |==> numerator - denominator
378:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@intValue():420:numerator / denominator |==> numerator % denominator
379:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@intValue():420:numerator / denominator |==> numerator * denominator
380:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@intValue():420:numerator / denominator |==> numerator + denominator
381:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@intValue():420:numerator / denominator |==> numerator - denominator
382:AOR:/(long,long):%(long,long):org.apache.commons.lang.math.Fraction@longValue():430:(long)numerator / denominator |==> (long)numerator % denominator
383:AOR:/(long,long):*(long,long):org.apache.commons.lang.math.Fraction@longValue():430:(long)numerator / denominator |==> (long)numerator * denominator
384:AOR:/(long,long):+(long,long):org.apache.commons.lang.math.Fraction@longValue():430:(long)numerator / denominator |==> (long)numerator + denominator
385:AOR:/(long,long):-(long,long):org.apache.commons.lang.math.Fraction@longValue():430:(long)numerator / denominator |==> (long)numerator - denominator
386:AOR:/(float,float):%(float,float):org.apache.commons.lang.math.Fraction@floatValue():440:((float)numerator) / ((float)denominator) |==> ((float)numerator) % ((float)denominator)
387:AOR:/(float,float):*(float,float):org.apache.commons.lang.math.Fraction@floatValue():440:((float)numerator) / ((float)denominator) |==> ((float)numerator) * ((float)denominator)
388:AOR:/(float,float):+(float,float):org.apache.commons.lang.math.Fraction@floatValue():440:((float)numerator) / ((float)denominator) |==> ((float)numerator) + ((float)denominator)
389:AOR:/(float,float):-(float,float):org.apache.commons.lang.math.Fraction@floatValue():440:((float)numerator) / ((float)denominator) |==> ((float)numerator) - ((float)denominator)
390:AOR:/(double,double):%(double,double):org.apache.commons.lang.math.Fraction@doubleValue():450:((double)numerator) / ((double)denominator) |==> ((double)numerator) % ((double)denominator)
391:AOR:/(double,double):*(double,double):org.apache.commons.lang.math.Fraction@doubleValue():450:((double)numerator) / ((double)denominator) |==> ((double)numerator) * ((double)denominator)
392:AOR:/(double,double):+(double,double):org.apache.commons.lang.math.Fraction@doubleValue():450:((double)numerator) / ((double)denominator) |==> ((double)numerator) + ((double)denominator)
393:AOR:/(double,double):-(double,double):org.apache.commons.lang.math.Fraction@doubleValue():450:((double)numerator) / ((double)denominator) |==> ((double)numerator) - ((double)denominator)
394:LVR:0:POS:org.apache.commons.lang.math.Fraction@reduce():466:0 |==> 1
395:LVR:0:NEG:org.apache.commons.lang.math.Fraction@reduce():466:0 |==> -1
396:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@reduce():466:numerator == 0 |==> numerator <= 0
397:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@reduce():466:numerator == 0 |==> numerator >= 0
398:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@reduce():466:numerator == 0 |==> false
399:COR:equals(ZERO):TRUE:org.apache.commons.lang.math.Fraction@reduce():467:equals(ZERO) |==> false
400:COR:equals(ZERO):FALSE:org.apache.commons.lang.math.Fraction@reduce():467:equals(ZERO) |==> true
401:LVR:POS:0:org.apache.commons.lang.math.Fraction@reduce():470:1 |==> 0
402:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@reduce():470:1 |==> -1
403:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@reduce():470:gcd == 1 |==> gcd <= 1
404:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@reduce():470:gcd == 1 |==> gcd >= 1
405:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@reduce():470:gcd == 1 |==> false
406:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@reduce():473:numerator / gcd |==> numerator % gcd
407:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@reduce():473:numerator / gcd |==> numerator * gcd
408:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@reduce():473:numerator / gcd |==> numerator + gcd
409:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@reduce():473:numerator / gcd |==> numerator - gcd
410:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@reduce():473:denominator / gcd |==> denominator % gcd
411:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@reduce():473:denominator / gcd |==> denominator * gcd
412:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@reduce():473:denominator / gcd |==> denominator + gcd
413:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@reduce():473:denominator / gcd |==> denominator - gcd
414:LVR:0:POS:org.apache.commons.lang.math.Fraction@invert():486:0 |==> 1
415:LVR:0:NEG:org.apache.commons.lang.math.Fraction@invert():486:0 |==> -1
416:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@invert():486:numerator == 0 |==> numerator <= 0
417:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@invert():486:numerator == 0 |==> numerator >= 0
418:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@invert():486:numerator == 0 |==> false
419:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@invert():489:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
420:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@invert():489:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
421:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@invert():489:numerator == Integer.MIN_VALUE |==> false
422:LVR:0:POS:org.apache.commons.lang.math.Fraction@invert():492:0 |==> 1
423:LVR:0:NEG:org.apache.commons.lang.math.Fraction@invert():492:0 |==> -1
424:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@invert():492:numerator < 0 |==> numerator != 0
425:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@invert():492:numerator < 0 |==> numerator <= 0
426:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@invert():492:numerator < 0 |==> false
427:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@invert():493:-denominator |==> +denominator
428:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@invert():493:-denominator |==> ~denominator
429:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@invert():493:-numerator |==> +numerator
430:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@invert():493:-numerator |==> ~numerator
431:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@negate():508:numerator == Integer.MIN_VALUE |==> numerator <= Integer.MIN_VALUE
432:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@negate():508:numerator == Integer.MIN_VALUE |==> numerator >= Integer.MIN_VALUE
433:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@negate():508:numerator == Integer.MIN_VALUE |==> false
434:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@negate():511:-numerator |==> +numerator
435:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@negate():511:-numerator |==> ~numerator
436:LVR:0:POS:org.apache.commons.lang.math.Fraction@abs():524:0 |==> 1
437:LVR:0:NEG:org.apache.commons.lang.math.Fraction@abs():524:0 |==> -1
438:ROR:>=(int,int):==(int,int):org.apache.commons.lang.math.Fraction@abs():524:numerator >= 0 |==> numerator == 0
439:ROR:>=(int,int):>(int,int):org.apache.commons.lang.math.Fraction@abs():524:numerator >= 0 |==> numerator > 0
440:ROR:>=(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@abs():524:numerator >= 0 |==> true
441:LVR:POS:0:org.apache.commons.lang.math.Fraction@pow(int):543:1 |==> 0
442:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@pow(int):543:1 |==> -1
443:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@pow(int):543:power == 1 |==> power <= 1
444:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@pow(int):543:power == 1 |==> power >= 1
445:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@pow(int):543:power == 1 |==> false
446:LVR:0:POS:org.apache.commons.lang.math.Fraction@pow(int):545:0 |==> 1
447:LVR:0:NEG:org.apache.commons.lang.math.Fraction@pow(int):545:0 |==> -1
448:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@pow(int):545:power == 0 |==> power <= 0
449:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@pow(int):545:power == 0 |==> power >= 0
450:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@pow(int):545:power == 0 |==> false
451:LVR:0:POS:org.apache.commons.lang.math.Fraction@pow(int):547:0 |==> 1
452:LVR:0:NEG:org.apache.commons.lang.math.Fraction@pow(int):547:0 |==> -1
453:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@pow(int):547:power < 0 |==> power != 0
454:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@pow(int):547:power < 0 |==> power <= 0
455:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@pow(int):547:power < 0 |==> false
456:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@pow(int):548:power == Integer.MIN_VALUE |==> power <= Integer.MIN_VALUE
457:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@pow(int):548:power == Integer.MIN_VALUE |==> power >= Integer.MIN_VALUE
458:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@pow(int):548:power == Integer.MIN_VALUE |==> false
459:LVR:POS:0:org.apache.commons.lang.math.Fraction@pow(int):549:2 |==> 0
460:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@pow(int):549:2 |==> -2
461:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@pow(int):549:-(power / 2) |==> +(power / 2)
462:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@pow(int):549:-(power / 2) |==> ~(power / 2)
463:LVR:POS:0:org.apache.commons.lang.math.Fraction@pow(int):549:2 |==> 0
464:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@pow(int):549:2 |==> -2
465:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@pow(int):549:power / 2 |==> power % 2
466:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@pow(int):549:power / 2 |==> power * 2
467:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@pow(int):549:power / 2 |==> power + 2
468:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@pow(int):549:power / 2 |==> power - 2
469:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@pow(int):551:-power |==> +power
470:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@pow(int):551:-power |==> ~power
471:LVR:POS:0:org.apache.commons.lang.math.Fraction@pow(int):554:2 |==> 0
472:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@pow(int):554:2 |==> -2
473:AOR:%(int,int):*(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:power % 2 |==> power * 2
474:AOR:%(int,int):+(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:power % 2 |==> power + 2
475:AOR:%(int,int):-(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:power % 2 |==> power - 2
476:AOR:%(int,int):/(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:power % 2 |==> power / 2
477:LVR:0:POS:org.apache.commons.lang.math.Fraction@pow(int):554:0 |==> 1
478:LVR:0:NEG:org.apache.commons.lang.math.Fraction@pow(int):554:0 |==> -1
479:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:(power % 2) == 0 |==> (power % 2) <= 0
480:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:(power % 2) == 0 |==> (power % 2) >= 0
481:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@pow(int):554:(power % 2) == 0 |==> false
482:LVR:POS:0:org.apache.commons.lang.math.Fraction@pow(int):555:2 |==> 0
483:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@pow(int):555:2 |==> -2
484:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@pow(int):555:power / 2 |==> power % 2
485:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@pow(int):555:power / 2 |==> power * 2
486:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@pow(int):555:power / 2 |==> power + 2
487:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@pow(int):555:power / 2 |==> power - 2
488:LVR:POS:0:org.apache.commons.lang.math.Fraction@pow(int):557:2 |==> 0
489:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@pow(int):557:2 |==> -2
490:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@pow(int):557:power / 2 |==> power % 2
491:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@pow(int):557:power / 2 |==> power * 2
492:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@pow(int):557:power / 2 |==> power + 2
493:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@pow(int):557:power / 2 |==> power - 2
494:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:1 |==> 0
495:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:1 |==> -1
496:ROR:<=(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 |==> Math.abs(u) < 1
497:ROR:<=(int,int):==(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 |==> Math.abs(u) == 1
498:ROR:<=(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 |==> true
499:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:1 |==> 0
500:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:1 |==> -1
501:ROR:<=(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(v) <= 1 |==> Math.abs(v) < 1
502:ROR:<=(int,int):==(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(v) <= 1 |==> Math.abs(v) == 1
503:ROR:<=(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(v) <= 1 |==> true
504:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 || Math.abs(v) <= 1 |==> Math.abs(u) <= 1 != Math.abs(v) <= 1
505:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 || Math.abs(v) <= 1 |==> Math.abs(u) <= 1
506:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 || Math.abs(v) <= 1 |==> Math.abs(v) <= 1
507:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):574:Math.abs(u) <= 1 || Math.abs(v) <= 1 |==> true
508:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):575:1 |==> 0
509:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):575:1 |==> -1
510:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:0 |==> 1
511:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:0 |==> -1
512:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:u > 0 |==> u != 0
513:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:u > 0 |==> u >= 0
514:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:u > 0 |==> false
515:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:-u |==> +u
516:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:-u |==> ~u
517:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):581:u = -u |==> <NO-OP>
518:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:0 |==> 1
519:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:0 |==> -1
520:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:v > 0 |==> v != 0
521:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:v > 0 |==> v >= 0
522:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:v > 0 |==> false
523:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:-v |==> +v
524:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:-v |==> ~v
525:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):582:v = -v |==> <NO-OP>
526:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):584:0 |==> 1
527:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):584:0 |==> -1
528:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:1 |==> 0
529:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:1 |==> -1
530:LOR:&(int,int):^(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:u & 1 |==> u ^ 1
531:LOR:&(int,int):|(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:u & 1 |==> u | 1
532:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:0 |==> 1
533:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:0 |==> -1
534:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 |==> (u & 1) <= 0
535:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 |==> (u & 1) >= 0
536:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 |==> false
537:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:1 |==> 0
538:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:1 |==> -1
539:LOR:&(int,int):^(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:v & 1 |==> v ^ 1
540:LOR:&(int,int):|(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:v & 1 |==> v | 1
541:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:0 |==> 1
542:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:0 |==> -1
543:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(v & 1) == 0 |==> (v & 1) <= 0
544:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(v & 1) == 0 |==> (v & 1) >= 0
545:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(v & 1) == 0 |==> false
546:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 |==> (u & 1) == 0 == ((v & 1) == 0)
547:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 |==> false
548:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 |==> (u & 1) == 0
549:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 |==> (v & 1) == 0
550:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:31 |==> 0
551:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:31 |==> -31
552:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:k < 31 |==> k != 31
553:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:k < 31 |==> k <= 31
554:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:k < 31 |==> false
555:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> ((u & 1) == 0 && (v & 1) == 0) == k < 31
556:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> false
557:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> (u & 1) == 0 && (v & 1) == 0
558:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):585:(u & 1) == 0 && (v & 1) == 0 && k < 31 |==> k < 31
559:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:2 |==> 0
560:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:2 |==> -2
561:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:u /= 2 |==> <NO-OP>
562:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:2 |==> 0
563:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:2 |==> -2
564:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:v /= 2 |==> <NO-OP>
565:STD:<INC>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):586:k++ |==> <NO-OP>
566:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:31 |==> 0
567:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:31 |==> -31
568:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:k == 31 |==> k <= 31
569:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:k == 31 |==> k >= 31
570:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):588:k == 31 |==> false
571:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:1 |==> 0
572:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:1 |==> -1
573:LOR:&(int,int):^(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:u & 1 |==> u ^ 1
574:LOR:&(int,int):|(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:u & 1 |==> u | 1
575:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:1 |==> 0
576:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:1 |==> -1
577:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:(u & 1) == 1 |==> (u & 1) <= 1
578:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:(u & 1) == 1 |==> (u & 1) >= 1
579:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:(u & 1) == 1 |==> false
580:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:-(u / 2) |==> +(u / 2)
581:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:-(u / 2) |==> ~(u / 2)
582:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:2 |==> 0
583:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:2 |==> -2
584:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:u / 2 |==> u % 2
585:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:u / 2 |==> u * 2
586:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:u / 2 |==> u + 2
587:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):593:u / 2 |==> u - 2
588:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:1 |==> 0
589:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:1 |==> -1
590:LOR:&(int,int):^(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:t & 1 |==> t ^ 1
591:LOR:&(int,int):|(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:t & 1 |==> t | 1
592:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:0 |==> 1
593:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:0 |==> -1
594:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:(t & 1) == 0 |==> (t & 1) <= 0
595:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:(t & 1) == 0 |==> (t & 1) >= 0
596:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):599:(t & 1) == 0 |==> false
597:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):600:2 |==> 0
598:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):600:2 |==> -2
599:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):600:t /= 2 |==> <NO-OP>
600:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:0 |==> 1
601:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:0 |==> -1
602:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:t > 0 |==> t != 0
603:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:t > 0 |==> t >= 0
604:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):603:t > 0 |==> false
605:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):604:-t |==> +t
606:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):604:-t |==> ~t
607:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):604:u = -t |==> <NO-OP>
608:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):606:v = t |==> <NO-OP>
609:AOR:-(int,int):%(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:v - u |==> v % u
610:AOR:-(int,int):*(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:v - u |==> v * u
611:AOR:-(int,int):+(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:v - u |==> v + u
612:AOR:-(int,int):/(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:v - u |==> v / u
613:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:2 |==> 0
614:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:2 |==> -2
615:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:(v - u) / 2 |==> (v - u) % 2
616:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:(v - u) / 2 |==> (v - u) * 2
617:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:(v - u) / 2 |==> (v - u) + 2
618:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:(v - u) / 2 |==> (v - u) - 2
619:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):609:t = (v - u) / 2 |==> <NO-OP>
620:LVR:0:POS:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:0 |==> 1
621:LVR:0:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:0 |==> -1
622:ROR:!=(int,int):<(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:t != 0 |==> t < 0
623:ROR:!=(int,int):>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:t != 0 |==> t > 0
624:ROR:!=(int,int):TRUE(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):612:t != 0 |==> true
625:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:-u |==> +u
626:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:-u |==> ~u
627:LVR:POS:0:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:1 |==> 0
628:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:1 |==> -1
629:SOR:<<(int,int):>>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:1 << k |==> 1 >> k
630:SOR:<<(int,int):>>>(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:1 << k |==> 1 >>> k
631:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:-u * (1 << k) |==> -u % (1 << k)
632:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:-u * (1 << k) |==> -u + (1 << k)
633:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:-u * (1 << k) |==> -u - (1 << k)
634:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@greatestCommonDivisor(int,int):613:-u * (1 << k) |==> -u / (1 << k)
635:AOR:*(long,long):%(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):629:((long)x) * ((long)y) |==> ((long)x) % ((long)y)
636:AOR:*(long,long):+(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):629:((long)x) * ((long)y) |==> ((long)x) + ((long)y)
637:AOR:*(long,long):-(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):629:((long)x) * ((long)y) |==> ((long)x) - ((long)y)
638:AOR:*(long,long):/(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):629:((long)x) * ((long)y) |==> ((long)x) / ((long)y)
639:ROR:<(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE |==> m != Integer.MIN_VALUE
640:ROR:<(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE |==> m <= Integer.MIN_VALUE
641:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE |==> false
642:ROR:>(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):631:m > Integer.MAX_VALUE |==> m != Integer.MAX_VALUE
643:ROR:>(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):631:m > Integer.MAX_VALUE |==> m >= Integer.MAX_VALUE
644:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):631:m > Integer.MAX_VALUE |==> false
645:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m < Integer.MIN_VALUE != m > Integer.MAX_VALUE
646:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m < Integer.MIN_VALUE
647:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):631:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> m > Integer.MAX_VALUE
648:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@mulAndCheck(int,int):630:m < Integer.MIN_VALUE || m > Integer.MAX_VALUE |==> true
649:AOR:*(long,long):%(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):648:((long)x) * ((long)y) |==> ((long)x) % ((long)y)
650:AOR:*(long,long):+(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):648:((long)x) * ((long)y) |==> ((long)x) + ((long)y)
651:AOR:*(long,long):-(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):648:((long)x) * ((long)y) |==> ((long)x) - ((long)y)
652:AOR:*(long,long):/(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):648:((long)x) * ((long)y) |==> ((long)x) / ((long)y)
653:ROR:>(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):649:m > Integer.MAX_VALUE |==> m != Integer.MAX_VALUE
654:ROR:>(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):649:m > Integer.MAX_VALUE |==> m >= Integer.MAX_VALUE
655:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@mulPosAndCheck(int,int):649:m > Integer.MAX_VALUE |==> false
656:AOR:+(long,long):%(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):665:(long)x + (long)y |==> (long)x % (long)y
657:AOR:+(long,long):*(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):665:(long)x + (long)y |==> (long)x * (long)y
658:AOR:+(long,long):-(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):665:(long)x + (long)y |==> (long)x - (long)y
659:AOR:+(long,long):/(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):665:(long)x + (long)y |==> (long)x / (long)y
660:ROR:<(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE |==> s != Integer.MIN_VALUE
661:ROR:<(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE |==> s <= Integer.MIN_VALUE
662:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE |==> false
663:ROR:>(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):667:s > Integer.MAX_VALUE |==> s != Integer.MAX_VALUE
664:ROR:>(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):667:s > Integer.MAX_VALUE |==> s >= Integer.MAX_VALUE
665:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):667:s > Integer.MAX_VALUE |==> false
666:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE != s > Integer.MAX_VALUE
667:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE
668:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):667:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s > Integer.MAX_VALUE
669:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@addAndCheck(int,int):666:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> true
670:AOR:-(long,long):%(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):683:(long)x - (long)y |==> (long)x % (long)y
671:AOR:-(long,long):*(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):683:(long)x - (long)y |==> (long)x * (long)y
672:AOR:-(long,long):+(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):683:(long)x - (long)y |==> (long)x + (long)y
673:AOR:-(long,long):/(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):683:(long)x - (long)y |==> (long)x / (long)y
674:ROR:<(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE |==> s != Integer.MIN_VALUE
675:ROR:<(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE |==> s <= Integer.MIN_VALUE
676:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE |==> false
677:ROR:>(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):685:s > Integer.MAX_VALUE |==> s != Integer.MAX_VALUE
678:ROR:>(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):685:s > Integer.MAX_VALUE |==> s >= Integer.MAX_VALUE
679:ROR:>(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):685:s > Integer.MAX_VALUE |==> false
680:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE != s > Integer.MAX_VALUE
681:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s < Integer.MIN_VALUE
682:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):685:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> s > Integer.MAX_VALUE
683:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@subAndCheck(int,int):684:s < Integer.MIN_VALUE || s > Integer.MAX_VALUE |==> true
684:LVR:TRUE:FALSE:org.apache.commons.lang.math.Fraction@add(org.apache.commons.lang.math.Fraction):702:true |==> false
685:LVR:FALSE:TRUE:org.apache.commons.lang.math.Fraction@subtract(org.apache.commons.lang.math.Fraction):716:false |==> true
686:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):730:fraction == null |==> false
687:LVR:0:POS:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:0 |==> 1
688:LVR:0:NEG:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:0 |==> -1
689:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:numerator == 0 |==> numerator <= 0
690:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:numerator == 0 |==> numerator >= 0
691:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):734:numerator == 0 |==> false
692:COR:isAdd:TRUE:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):735:isAdd |==> false
693:COR:isAdd:FALSE:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):735:isAdd |==> true
694:LVR:0:POS:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:0 |==> 1
695:LVR:0:NEG:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:0 |==> -1
696:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:fraction.numerator == 0 |==> fraction.numerator <= 0
697:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:fraction.numerator == 0 |==> fraction.numerator >= 0
698:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):737:fraction.numerator == 0 |==> false
699:LVR:POS:0:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:1 |==> 0
700:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:1 |==> -1
701:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:d1 == 1 |==> d1 <= 1
702:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:d1 == 1 |==> d1 >= 1
703:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):743:d1 == 1 |==> false
704:COR:isAdd:TRUE:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):748:isAdd |==> false
705:COR:isAdd:FALSE:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):748:isAdd |==> true
706:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):755:fraction.denominator / d1 |==> fraction.denominator % d1
707:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):755:fraction.denominator / d1 |==> fraction.denominator * d1
708:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):755:fraction.denominator / d1 |==> fraction.denominator + d1
709:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):755:fraction.denominator / d1 |==> fraction.denominator - d1
710:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):757:denominator / d1 |==> denominator % d1
711:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):757:denominator / d1 |==> denominator * d1
712:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):757:denominator / d1 |==> denominator + d1
713:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):757:denominator / d1 |==> denominator - d1
714:COR:isAdd:TRUE:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):758:isAdd |==> false
715:COR:isAdd:FALSE:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):758:isAdd |==> true
716:LVR:0:POS:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:0 |==> 1
717:LVR:0:NEG:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:0 |==> -1
718:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:tmodd1 == 0 |==> tmodd1 <= 0
719:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:tmodd1 == 0 |==> tmodd1 >= 0
720:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):762:tmodd1 == 0 |==> false
721:LVR:POS:0:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:31 |==> 0
722:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:31 |==> -31
723:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:w.bitLength() > 31 |==> w.bitLength() != 31
724:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:w.bitLength() > 31 |==> w.bitLength() >= 31
725:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):766:w.bitLength() > 31 |==> false
726:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:denominator / d1 |==> denominator % d1
727:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:denominator / d1 |==> denominator * d1
728:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:denominator / d1 |==> denominator + d1
729:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:denominator / d1 |==> denominator - d1
730:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:fraction.denominator / d2 |==> fraction.denominator % d2
731:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:fraction.denominator / d2 |==> fraction.denominator * d2
732:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:fraction.denominator / d2 |==> fraction.denominator + d2
733:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@addSub(org.apache.commons.lang.math.Fraction,boolean):772:fraction.denominator / d2 |==> fraction.denominator - d2
734:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):786:fraction == null |==> false
735:LVR:0:POS:org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:0 |==> 1
736:LVR:0:NEG:org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:0 |==> -1
737:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 |==> numerator <= 0
738:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 |==> numerator >= 0
739:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 |==> false
740:LVR:0:POS:org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:0 |==> 1
741:LVR:0:NEG:org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:0 |==> -1
742:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:fraction.numerator == 0 |==> fraction.numerator <= 0
743:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:fraction.numerator == 0 |==> fraction.numerator >= 0
744:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:fraction.numerator == 0 |==> false
745:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 || fraction.numerator == 0 |==> numerator == 0 != (fraction.numerator == 0)
746:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 || fraction.numerator == 0 |==> numerator == 0
747:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 || fraction.numerator == 0 |==> fraction.numerator == 0
748:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):789:numerator == 0 || fraction.numerator == 0 |==> true
749:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:numerator / d1 |==> numerator % d1
750:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:numerator / d1 |==> numerator * d1
751:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:numerator / d1 |==> numerator + d1
752:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:numerator / d1 |==> numerator - d1
753:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:fraction.numerator / d2 |==> fraction.numerator % d2
754:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:fraction.numerator / d2 |==> fraction.numerator * d2
755:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:fraction.numerator / d2 |==> fraction.numerator + d2
756:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):797:fraction.numerator / d2 |==> fraction.numerator - d2
757:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:denominator / d2 |==> denominator % d2
758:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:denominator / d2 |==> denominator * d2
759:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:denominator / d2 |==> denominator + d2
760:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:denominator / d2 |==> denominator - d2
761:AOR:/(int,int):%(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:fraction.denominator / d1 |==> fraction.denominator % d1
762:AOR:/(int,int):*(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:fraction.denominator / d1 |==> fraction.denominator * d1
763:AOR:/(int,int):+(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:fraction.denominator / d1 |==> fraction.denominator + d1
764:AOR:/(int,int):-(int,int):org.apache.commons.lang.math.Fraction@multiplyBy(org.apache.commons.lang.math.Fraction):798:fraction.denominator / d1 |==> fraction.denominator - d1
765:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):812:fraction == null |==> false
766:LVR:0:POS:org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:0 |==> 1
767:LVR:0:NEG:org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:0 |==> -1
768:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:fraction.numerator == 0 |==> fraction.numerator <= 0
769:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:fraction.numerator == 0 |==> fraction.numerator >= 0
770:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@divideBy(org.apache.commons.lang.math.Fraction):815:fraction.numerator == 0 |==> false
771:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):833:obj == this |==> false
772:LVR:TRUE:FALSE:org.apache.commons.lang.math.Fraction@equals(java.lang.Object):834:true |==> false
773:LVR:FALSE:TRUE:org.apache.commons.lang.math.Fraction@equals(java.lang.Object):836:false |==> true
774:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):836:obj instanceof Fraction == false |==> false
775:ROR:==(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):836:obj instanceof Fraction == false |==> obj instanceof Fraction
776:ROR:==(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):836:obj instanceof Fraction == false |==> false
777:LVR:FALSE:TRUE:org.apache.commons.lang.math.Fraction@equals(java.lang.Object):837:false |==> true
778:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() |==> getNumerator() <= other.getNumerator()
779:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() |==> getNumerator() >= other.getNumerator()
780:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() |==> false
781:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):841:getDenominator() == other.getDenominator() |==> getDenominator() <= other.getDenominator()
782:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):841:getDenominator() == other.getDenominator() |==> getDenominator() >= other.getDenominator()
783:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):841:getDenominator() == other.getDenominator() |==> false
784:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getNumerator() == other.getNumerator() == (getDenominator() == other.getDenominator())
785:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> false
786:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):840:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getNumerator() == other.getNumerator()
787:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@equals(java.lang.Object):841:getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator() |==> getDenominator() == other.getDenominator()
788:LVR:0:POS:org.apache.commons.lang.math.Fraction@hashCode():850:0 |==> 1
789:LVR:0:NEG:org.apache.commons.lang.math.Fraction@hashCode():850:0 |==> -1
790:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@hashCode():850:hashCode == 0 |==> hashCode <= 0
791:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@hashCode():850:hashCode == 0 |==> hashCode >= 0
792:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@hashCode():850:hashCode == 0 |==> false
793:LVR:POS:0:org.apache.commons.lang.math.Fraction@hashCode():852:37 |==> 0
794:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@hashCode():852:37 |==> -37
795:LVR:POS:0:org.apache.commons.lang.math.Fraction@hashCode():852:37 |==> 0
796:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@hashCode():852:37 |==> -37
797:LVR:POS:0:org.apache.commons.lang.math.Fraction@hashCode():852:17 |==> 0
798:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@hashCode():852:17 |==> -17
799:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 |==> 37 % 17
800:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 |==> 37 + 17
801:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 |==> 37 - 17
802:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 |==> 37 / 17
803:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 + getNumerator() |==> 37 * 17 % getNumerator()
804:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 + getNumerator() |==> 37 * 17 * getNumerator()
805:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 + getNumerator() |==> 37 * 17 - getNumerator()
806:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * 17 + getNumerator() |==> 37 * 17 / getNumerator()
807:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) |==> 37 % (37 * 17 + getNumerator())
808:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) |==> 37 + (37 * 17 + getNumerator())
809:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) |==> 37 - (37 * 17 + getNumerator())
810:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) |==> 37 / (37 * 17 + getNumerator())
811:AOR:+(int,int):%(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) % getDenominator()
812:AOR:+(int,int):*(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) * getDenominator()
813:AOR:+(int,int):-(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) - getDenominator()
814:AOR:+(int,int):/(int,int):org.apache.commons.lang.math.Fraction@hashCode():852:37 * (37 * 17 + getNumerator()) + getDenominator() |==> 37 * (37 * 17 + getNumerator()) / getDenominator()
815:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@hashCode():852:hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator() |==> <NO-OP>
816:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):871:this == other |==> false
817:LVR:0:POS:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):872:0 |==> 1
818:LVR:0:NEG:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):872:0 |==> -1
819:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator |==> numerator <= other.numerator
820:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator |==> numerator >= other.numerator
821:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator |==> false
822:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:denominator == other.denominator |==> denominator <= other.denominator
823:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:denominator == other.denominator |==> denominator >= other.denominator
824:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:denominator == other.denominator |==> false
825:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator && denominator == other.denominator |==> numerator == other.numerator == (denominator == other.denominator)
826:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator && denominator == other.denominator |==> false
827:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator && denominator == other.denominator |==> numerator == other.numerator
828:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):874:numerator == other.numerator && denominator == other.denominator |==> denominator == other.denominator
829:LVR:0:POS:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):875:0 |==> 1
830:LVR:0:NEG:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):875:0 |==> -1
831:AOR:*(long,long):%(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):879:(long)numerator * (long)other.denominator |==> (long)numerator % (long)other.denominator
832:AOR:*(long,long):+(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):879:(long)numerator * (long)other.denominator |==> (long)numerator + (long)other.denominator
833:AOR:*(long,long):-(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):879:(long)numerator * (long)other.denominator |==> (long)numerator - (long)other.denominator
834:AOR:*(long,long):/(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):879:(long)numerator * (long)other.denominator |==> (long)numerator / (long)other.denominator
835:AOR:*(long,long):%(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):880:(long)other.numerator * (long)denominator |==> (long)other.numerator % (long)denominator
836:AOR:*(long,long):+(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):880:(long)other.numerator * (long)denominator |==> (long)other.numerator + (long)denominator
837:AOR:*(long,long):-(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):880:(long)other.numerator * (long)denominator |==> (long)other.numerator - (long)denominator
838:AOR:*(long,long):/(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):880:(long)other.numerator * (long)denominator |==> (long)other.numerator / (long)denominator
839:ROR:==(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):881:first == second |==> first <= second
840:ROR:==(long,long):>=(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):881:first == second |==> first >= second
841:ROR:==(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):881:first == second |==> false
842:LVR:0:POS:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):882:0 |==> 1
843:LVR:0:NEG:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):882:0 |==> -1
844:ROR:<(long,long):!=(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):883:first < second |==> first != second
845:ROR:<(long,long):<=(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):883:first < second |==> first <= second
846:ROR:<(long,long):FALSE(long,long):org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):883:first < second |==> false
847:LVR:NEG:0:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):884:-1 |==> 0
848:LVR:NEG:POS:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):884:-1 |==> 1
849:LVR:POS:0:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):886:1 |==> 0
850:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@compareTo(java.lang.Object):886:1 |==> -1
851:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@toString():898:toString == null |==> false
852:LVR:POS:0:org.apache.commons.lang.math.Fraction@toString():899:32 |==> 0
853:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@toString():899:32 |==> -32
854:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toString():899:toString = new StringBuffer(32).append(getNumerator()).append('/').append(getDenominator()).toString() |==> <NO-OP>
855:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.lang.math.Fraction@toProperString():917:toProperString == null |==> false
856:LVR:0:POS:org.apache.commons.lang.math.Fraction@toProperString():918:0 |==> 1
857:LVR:0:NEG:org.apache.commons.lang.math.Fraction@toProperString():918:0 |==> -1
858:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@toProperString():918:numerator == 0 |==> numerator <= 0
859:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@toProperString():918:numerator == 0 |==> numerator >= 0
860:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@toProperString():918:numerator == 0 |==> false
861:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toProperString():919:toProperString = "0" |==> <NO-OP>
862:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@toProperString():920:numerator == denominator |==> numerator <= denominator
863:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@toProperString():920:numerator == denominator |==> numerator >= denominator
864:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@toProperString():920:numerator == denominator |==> false
865:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toProperString():921:toProperString = "1" |==> <NO-OP>
866:LVR:NEG:0:org.apache.commons.lang.math.Fraction@toProperString():922:-1 |==> 0
867:LVR:NEG:POS:org.apache.commons.lang.math.Fraction@toProperString():922:-1 |==> 1
868:AOR:*(int,int):%(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:-1 * denominator |==> -1 % denominator
869:AOR:*(int,int):+(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:-1 * denominator |==> -1 + denominator
870:AOR:*(int,int):-(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:-1 * denominator |==> -1 - denominator
871:AOR:*(int,int):/(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:-1 * denominator |==> -1 / denominator
872:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:numerator == -1 * denominator |==> numerator <= -1 * denominator
873:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:numerator == -1 * denominator |==> numerator >= -1 * denominator
874:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@toProperString():922:numerator == -1 * denominator |==> false
875:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toProperString():923:toProperString = "-1" |==> <NO-OP>
876:LVR:0:POS:org.apache.commons.lang.math.Fraction@toProperString():924:0 |==> 1
877:LVR:0:NEG:org.apache.commons.lang.math.Fraction@toProperString():924:0 |==> -1
878:ROR:>(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:numerator > 0 |==> numerator != 0
879:ROR:>(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:numerator > 0 |==> numerator >= 0
880:ROR:>(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:numerator > 0 |==> false
881:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@toProperString():924:-numerator |==> +numerator
882:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@toProperString():924:-numerator |==> ~numerator
883:ORU:-(int):+(int):org.apache.commons.lang.math.Fraction@toProperString():924:-denominator |==> +denominator
884:ORU:-(int):~(int):org.apache.commons.lang.math.Fraction@toProperString():924:-denominator |==> ~denominator
885:ROR:<(int,int):!=(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) != -denominator
886:ROR:<(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:(numerator > 0 ? -numerator : numerator) < -denominator |==> (numerator > 0 ? -numerator : numerator) <= -denominator
887:ROR:<(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@toProperString():924:(numerator > 0 ? -numerator : numerator) < -denominator |==> false
888:LVR:0:POS:org.apache.commons.lang.math.Fraction@toProperString():930:0 |==> 1
889:LVR:0:NEG:org.apache.commons.lang.math.Fraction@toProperString():930:0 |==> -1
890:ROR:==(int,int):<=(int,int):org.apache.commons.lang.math.Fraction@toProperString():930:properNumerator == 0 |==> properNumerator <= 0
891:ROR:==(int,int):>=(int,int):org.apache.commons.lang.math.Fraction@toProperString():930:properNumerator == 0 |==> properNumerator >= 0
892:ROR:==(int,int):FALSE(int,int):org.apache.commons.lang.math.Fraction@toProperString():930:properNumerator == 0 |==> false
893:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toProperString():931:toProperString = Integer.toString(getProperWhole()) |==> <NO-OP>
894:LVR:POS:0:org.apache.commons.lang.math.Fraction@toProperString():933:32 |==> 0
895:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@toProperString():933:32 |==> -32
896:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toProperString():933:toProperString = new StringBuffer(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString() |==> <NO-OP>
897:LVR:POS:0:org.apache.commons.lang.math.Fraction@toProperString():939:32 |==> 0
898:LVR:POS:NEG:org.apache.commons.lang.math.Fraction@toProperString():939:32 |==> -32
899:STD:<ASSIGN>:<NO-OP>:org.apache.commons.lang.math.Fraction@toProperString():939:toProperString = new StringBuffer(32).append(getNumerator()).append('/').append(getDenominator()).toString() |==> <NO-OP>
