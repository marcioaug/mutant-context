1:LVR:POS:0:org.apache.commons.math.optimization.direct.MultiDirectional@<init>():46:2.0 |==> 0.0
2:LVR:POS:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@<init>():46:2.0 |==> -2.0
3:LVR:POS:0:org.apache.commons.math.optimization.direct.MultiDirectional@<init>():47:0.5 |==> 0.0
4:LVR:POS:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@<init>():47:0.5 |==> -0.5
5:STD:<CALL>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):67:incrementIterationsCounter() |==> <NO-OP>
6:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):71:0 |==> 1
7:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):71:0 |==> -1
8:LVR:POS:0:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):74:1.0 |==> 0.0
9:LVR:POS:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):74:1.0 |==> -1.0
10:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:0 |==> 1
11:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:0 |==> -1
12:ROR:<(int,int):!=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:comparator.compare(reflected, best) < 0 |==> comparator.compare(reflected, best) != 0
13:ROR:<(int,int):<=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:comparator.compare(reflected, best) < 0 |==> comparator.compare(reflected, best) <= 0
14:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):75:comparator.compare(reflected, best) < 0 |==> false
15:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:0 |==> 1
16:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:0 |==> -1
17:ROR:<=(int,int):<(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:comparator.compare(reflected, expanded) <= 0 |==> comparator.compare(reflected, expanded) < 0
18:ROR:<=(int,int):==(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:comparator.compare(reflected, expanded) <= 0 |==> comparator.compare(reflected, expanded) == 0
19:ROR:<=(int,int):TRUE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):80:comparator.compare(reflected, expanded) <= 0 |==> true
20:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):82:simplex = reflectedSimplex |==> <NO-OP>
21:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:0 |==> 1
22:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:0 |==> -1
23:ROR:<(int,int):!=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:comparator.compare(contracted, best) < 0 |==> comparator.compare(contracted, best) != 0
24:ROR:<(int,int):<=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:comparator.compare(contracted, best) < 0 |==> comparator.compare(contracted, best) <= 0
25:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):91:comparator.compare(contracted, best) < 0 |==> false
26:LVR:TRUE:FALSE:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):98:true |==> false
27:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:0 |==> 1
28:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:0 |==> -1
29:ROR:<(int,int):!=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:i < simplex.length |==> i != simplex.length
30:ROR:<(int,int):<=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:i < simplex.length |==> i <= simplex.length
31:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):99:i < simplex.length |==> false
32:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):100:converged &= checker.converged(iter, original[i], simplex[i]) |==> <NO-OP>
33:COR:converged:TRUE:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):102:converged |==> false
34:COR:converged:FALSE:org.apache.commons.math.optimization.direct.MultiDirectional@iterateSimplex(java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):102:converged |==> true
35:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):124:0 |==> 1
36:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):124:0 |==> -1
37:LVR:POS:0:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:1 |==> 0
38:LVR:POS:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:1 |==> -1
39:AOR:+(int,int):%(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:n + 1 |==> n % 1
40:AOR:+(int,int):*(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:n + 1 |==> n * 1
41:AOR:+(int,int):-(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:n + 1 |==> n - 1
42:AOR:+(int,int):/(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:n + 1 |==> n / 1
43:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):128:simplex = new RealPointValuePair[n + 1] |==> <NO-OP>
44:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):129:0 |==> 1
45:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):129:0 |==> -1
46:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):129:0 |==> 1
47:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):129:0 |==> -1
48:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):129:simplex[0] = original[0] |==> <NO-OP>
49:LVR:POS:0:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:1 |==> 0
50:LVR:POS:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:1 |==> -1
51:ROR:<=(int,int):<(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:i <= n |==> i < n
52:ROR:<=(int,int):==(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:i <= n |==> i == n
53:ROR:<=(int,int):TRUE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):130:i <= n |==> true
54:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:0 |==> 1
55:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:0 |==> -1
56:ROR:<(int,int):!=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:j < n |==> j != n
57:ROR:<(int,int):<=(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:j < n |==> j <= n
58:ROR:<(int,int):FALSE(int,int):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):133:j < n |==> false
59:AOR:-(double,double):%(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] - xOriginal[j] |==> xSmallest[j] % xOriginal[j]
60:AOR:-(double,double):*(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] - xOriginal[j] |==> xSmallest[j] * xOriginal[j]
61:AOR:-(double,double):+(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] - xOriginal[j] |==> xSmallest[j] + xOriginal[j]
62:AOR:-(double,double):/(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] - xOriginal[j] |==> xSmallest[j] / xOriginal[j]
63:AOR:*(double,double):%(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:coeff * (xSmallest[j] - xOriginal[j]) |==> coeff % (xSmallest[j] - xOriginal[j])
64:AOR:*(double,double):+(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:coeff * (xSmallest[j] - xOriginal[j]) |==> coeff + (xSmallest[j] - xOriginal[j])
65:AOR:*(double,double):-(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:coeff * (xSmallest[j] - xOriginal[j]) |==> coeff - (xSmallest[j] - xOriginal[j])
66:AOR:*(double,double):/(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:coeff * (xSmallest[j] - xOriginal[j]) |==> coeff / (xSmallest[j] - xOriginal[j])
67:AOR:+(double,double):%(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]) |==> xSmallest[j] % (coeff * (xSmallest[j] - xOriginal[j]))
68:AOR:+(double,double):*(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]) |==> xSmallest[j] * (coeff * (xSmallest[j] - xOriginal[j]))
69:AOR:+(double,double):-(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]) |==> xSmallest[j] - coeff * (xSmallest[j] - xOriginal[j])
70:AOR:+(double,double):/(double,double):org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]) |==> xSmallest[j] / (coeff * (xSmallest[j] - xOriginal[j]))
71:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):134:xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]) |==> <NO-OP>
72:LVR:FALSE:TRUE:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):136:false |==> true
73:STD:<ASSIGN>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):136:simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false) |==> <NO-OP>
74:STD:<CALL>:<NO-OP>:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):140:evaluateSimplex(comparator) |==> <NO-OP>
75:LVR:0:POS:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):141:0 |==> 1
76:LVR:0:NEG:org.apache.commons.math.optimization.direct.MultiDirectional@evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator<org.apache.commons.math.optimization.RealPointValuePair>):141:0 |==> -1
